{"version":3,"file":"baseComponent.js","sourceRoot":"src/","sources":["components/baseComponent.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { LitElement, PropertyValueMap, PropertyValues } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { ProviderState } from '../providers/IProvider';\nimport { Providers } from '../providers/Providers';\nimport { LocalizationHelper } from '../utils/LocalizationHelper';\nimport { PACKAGE_VERSION } from '../utils/version';\n\n/**\n * Defines media query based on component width\n *\n * @export\n * @enum {string}\n */\nexport enum ComponentMediaQuery {\n  /**\n   * devices with width < 768\n   */\n  mobile = '',\n\n  /**\n   * devices with width < 1200\n   */\n  tablet = 'tablet',\n\n  /**\n   * devices with width > 1200\n   */\n  desktop = 'desktop'\n}\n\n/**\n * BaseComponent extends LitElement adding mgt specific features to all components\n *\n * @export  MgtBaseComponent\n * @abstract\n * @class MgtBaseComponent\n * @extends {LitElement}\n */\nexport abstract class MgtBaseComponent extends LitElement {\n  /**\n   * Exposes the semver of the library the component is part of\n   *\n   * @readonly\n   * @static\n   * @memberof MgtBaseComponent\n   */\n  public static get packageVersion() {\n    return PACKAGE_VERSION;\n  }\n\n  /**\n   * Gets or sets the direction of the component\n   *\n   * @protected\n   * @memberof MgtBaseComponent\n   */\n  @state() protected direction: 'ltr' | 'rtl' | 'auto' = 'ltr';\n\n  /**\n   * Gets the ComponentMediaQuery of the component\n   *\n   * @readonly\n   * @type {MgtElement.ComponentMediaQuery}\n   * @memberof MgtBaseComponent\n   */\n  public get mediaQuery(): ComponentMediaQuery {\n    if (this.offsetWidth < 768) {\n      return ComponentMediaQuery.mobile;\n    } else if (this.offsetWidth < 1200) {\n      return ComponentMediaQuery.tablet;\n    } else {\n      return ComponentMediaQuery.desktop;\n    }\n  }\n\n  /**\n   * A flag to check if the component is loading data state.\n   *\n   * @protected\n   * @memberof MgtBaseComponent\n   */\n  protected get isLoadingState(): boolean {\n    return this._isLoadingState;\n  }\n\n  /**\n   * A flag to check if the component has updated once.\n   *\n   * @readonly\n   * @protected\n   * @type {boolean}\n   * @memberof MgtBaseComponent\n   */\n  protected get isFirstUpdated(): boolean {\n    return this._isFirstUpdated;\n  }\n\n  /**\n   * returns component strings\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtBaseComponent\n   */\n  protected get strings(): Record<string, string> {\n    return {};\n  }\n\n  /**\n   * determines if login component is in loading state\n   *\n   * @type {boolean}\n   */\n  private _isLoadingState = false;\n\n  private _isFirstUpdated = false;\n  private _currentLoadStatePromise: Promise<unknown>;\n\n  constructor() {\n    super();\n    this.handleDirectionChanged();\n    this.handleLocalizationChanged();\n  }\n\n  /**\n   * Invoked each time the custom element is appended into a document-connected element\n   *\n   * @memberof MgtBaseComponent\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    LocalizationHelper.onStringsUpdated(this.handleLocalizationChanged);\n    LocalizationHelper.onDirectionUpdated(this.handleDirectionChanged);\n  }\n\n  /**\n   * Invoked each time the custom element is removed from a document-connected element\n   *\n   * @memberof MgtBaseComponent\n   */\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    LocalizationHelper.removeOnStringsUpdated(this.handleLocalizationChanged);\n    LocalizationHelper.removeOnDirectionUpdated(this.handleDirectionChanged);\n    Providers.removeProviderUpdatedListener(this.handleProviderUpdates);\n    Providers.removeActiveAccountChangedListener(this.handleActiveAccountUpdates);\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(changedProperties: PropertyValueMap<unknown> | Map<PropertyKey, unknown>): void {\n    super.firstUpdated(changedProperties);\n    this._isFirstUpdated = true;\n    Providers.onProviderUpdated(this.handleProviderUpdates);\n    Providers.onActiveAccountChanged(this.handleActiveAccountUpdates);\n    void this.requestStateUpdate();\n  }\n\n  /**\n   * load state into the component.\n   * Override this function to provide additional loading logic.\n   */\n  protected loadState(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Used to clear state in inherited components\n   */\n  protected clearState(): void {\n    // no-op\n  }\n\n  /**\n   * helps facilitate creation of events across components\n   *\n   * @protected\n   * @param {string} eventName\n   * @param {*} [detail]\n   * @param {boolean} [bubbles=false]\n   * @param {boolean} [cancelable=false]\n   * @param {boolean} [composed=false]\n   * @return {*}  {boolean}\n   * @memberof MgtBaseComponent\n   */\n  protected fireCustomEvent(\n    eventName: string,\n    detail?: unknown,\n    bubbles = false,\n    cancelable = false,\n    composed = false\n  ): boolean {\n    const event = new CustomEvent(eventName, {\n      bubbles,\n      cancelable,\n      composed,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      detail\n    });\n    return this.dispatchEvent(event);\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param changedProperties Map of changed properties with old values\n   */\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    const event = new CustomEvent('updated', {\n      bubbles: true,\n      cancelable: true\n    });\n    this.dispatchEvent(event);\n  }\n\n  /**\n   * Request to reload the state.\n   * Use reload instead of load to ensure loading events are fired.\n   *\n   * @protected\n   * @memberof MgtBaseComponent\n   */\n  protected async requestStateUpdate(force = false): Promise<unknown> {\n    // the component is still bootstraping - wait until first updated\n    if (!this._isFirstUpdated) {\n      return;\n    }\n\n    // Wait for the current load promise to complete (unless forced).\n    if (this.isLoadingState && !force) {\n      await this._currentLoadStatePromise;\n    }\n\n    const provider = Providers.globalProvider;\n\n    if (!provider) {\n      return Promise.resolve();\n    }\n\n    if (provider.state === ProviderState.SignedOut) {\n      // Signed out, clear the component state\n      this.clearState();\n      return;\n    } else if (provider.state === ProviderState.Loading) {\n      // The provider state is indeterminate. Do nothing.\n      return Promise.resolve();\n    } else {\n      // Signed in, load the internal component state\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n      const loadStatePromise = new Promise<void>(async (resolve, reject) => {\n        try {\n          this.setLoadingState(true);\n          this.fireCustomEvent('loadingInitiated');\n\n          await this.loadState();\n\n          this.setLoadingState(false);\n          this.fireCustomEvent('loadingCompleted');\n          resolve();\n        } catch (e) {\n          // Loading failed. Clear any partially set data.\n          this.clearState();\n\n          this.setLoadingState(false);\n          this.fireCustomEvent('loadingFailed');\n          reject(e);\n        }\n\n        // Return the load state promise.\n        // If loading + forced, chain the promises.\n        // This is to account for the lack of a cancellation token concept.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-assignment\n        return (this._currentLoadStatePromise =\n          // eslint-disable-next-line @typescript-eslint/no-misused-promises\n          this.isLoadingState && !!this._currentLoadStatePromise && force\n            ? // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n              this._currentLoadStatePromise.then(() => loadStatePromise)\n            : loadStatePromise);\n      });\n    }\n  }\n\n  protected setLoadingState = (value: boolean) => {\n    if (this._isLoadingState === value) {\n      return;\n    }\n\n    this._isLoadingState = value;\n    this.requestUpdate('isLoadingState');\n  };\n\n  private readonly handleProviderUpdates = () => {\n    void this.requestStateUpdate();\n  };\n\n  private readonly handleActiveAccountUpdates = () => {\n    this.clearState();\n    void this.requestStateUpdate();\n  };\n\n  private readonly handleLocalizationChanged = () => {\n    LocalizationHelper.updateStringsForTag(this.tagName, this.strings);\n    this.requestUpdate();\n  };\n\n  private readonly handleDirectionChanged = () => {\n    this.direction = LocalizationHelper.getDocumentDirection();\n  };\n}\n"]}