{"version":3,"file":"Graph.js","sourceRoot":"src/","sources":["Graph.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport {\n  AuthenticationHandler,\n  Client,\n  GraphRequest,\n  HTTPMessageHandler,\n  Middleware,\n  MiddlewareOptions,\n  RetryHandler,\n  RetryHandlerOptions,\n  TelemetryHandler\n} from '@microsoft/microsoft-graph-client';\n\nimport { IGraph, MICROSOFT_GRAPH_DEFAULT_ENDPOINT } from './IGraph';\nimport { IProvider } from './providers/IProvider';\nimport { Batch } from './utils/Batch';\nimport { ComponentMiddlewareOptions } from './utils/ComponentMiddlewareOptions';\nimport { chainMiddleware } from './utils/GraphHelpers';\nimport { SdkVersionMiddleware } from './utils/SdkVersionMiddleware';\nimport { PACKAGE_VERSION } from './utils/version';\nimport { customElementHelper } from './components/customElementHelper';\n\n/**\n * The version of the Graph to use for making requests.\n */\nconst GRAPH_VERSION = 'v1.0';\n\n/**\n * The base Graph implementation.\n *\n * @export\n * @abstract\n * @class Graph\n */\nexport class Graph implements IGraph {\n  /**\n   * the internal client used to make graph calls\n   *\n   * @readonly\n   * @type {Client}\n   * @memberof Graph\n   */\n  public get client(): Client {\n    return this._client;\n  }\n\n  /**\n   * the component name appended to Graph request headers\n   *\n   * @readonly\n   * @type {string}\n   * @memberof Graph\n   */\n  public get componentName(): string {\n    return this._componentName;\n  }\n\n  /**\n   * the version of the graph to query\n   *\n   * @readonly\n   * @type {string}\n   * @memberof Graph\n   */\n  public get version(): string {\n    return this._version;\n  }\n\n  private readonly _client: Client;\n  private _componentName: string;\n  private readonly _version: string;\n\n  constructor(client: Client, version: string = GRAPH_VERSION) {\n    this._client = client;\n    this._version = version;\n  }\n\n  /**\n   * Returns a new instance of the Graph using the same\n   * client within the context of the provider.\n   *\n   * @param {Element} component\n   * @returns {IGraph}\n   * @memberof Graph\n   */\n  public forComponent(component: Element | string): Graph {\n    const graph = new Graph(this._client, this._version);\n    graph.setComponent(component);\n    return graph;\n  }\n\n  /**\n   * Returns a new graph request for a specific component\n   * Used internally for analytics purposes\n   *\n   * @param {string} path\n   * @memberof Graph\n   */\n  public api(path: string): GraphRequest {\n    let request = this._client.api(path).version(this._version);\n\n    if (this._componentName) {\n      request.middlewareOptions = (options: MiddlewareOptions[]): GraphRequest => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/dot-notation\n        request['_middlewareOptions'] = request['_middlewareOptions'].concat(options);\n        return request;\n      };\n      request = request.middlewareOptions([new ComponentMiddlewareOptions(this._componentName)]);\n    }\n\n    return request;\n  }\n\n  /**\n   * creates a new batch request\n   *\n   * @returns {Batch}\n   * @memberof Graph\n   */\n  public createBatch<T = any>(): Batch<T> {\n    return new Batch<T>(this);\n  }\n\n  /**\n   * sets the component name used in request headers.\n   *\n   * @protected\n   * @param {Element} component\n   * @memberof Graph\n   */\n  protected setComponent(component: Element | string): void {\n    this._componentName = component instanceof Element ? customElementHelper.normalize(component.tagName) : component;\n  }\n}\n\n/**\n * create a new Graph instance using the specified provider.\n *\n * @static\n * @param {IProvider} provider\n * @returns {Graph}\n * @memberof Graph\n */\nexport const createFromProvider = (provider: IProvider, version?: string, component?: Element): Graph => {\n  const middleware: Middleware[] = [\n    new AuthenticationHandler(provider),\n    new RetryHandler(new RetryHandlerOptions()),\n    new TelemetryHandler(),\n    new SdkVersionMiddleware(PACKAGE_VERSION, provider.name),\n    new HTTPMessageHandler()\n  ];\n\n  const baseURL = provider.baseURL ? provider.baseURL : MICROSOFT_GRAPH_DEFAULT_ENDPOINT;\n  const client = Client.initWithMiddleware({\n    middleware: chainMiddleware(...middleware),\n    customHosts: provider.customHosts ? new Set(provider.customHosts) : null,\n    baseUrl: baseURL\n  });\n\n  const graph = new Graph(client, version);\n  return component ? graph.forComponent(component) : graph;\n};\n"]}