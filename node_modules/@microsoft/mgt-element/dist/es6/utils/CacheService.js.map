{"version":3,"file":"CacheService.js","sourceRoot":"src/","sources":["utils/CacheService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { Providers } from '../providers/Providers';\nimport { ProviderState } from '../providers/IProvider';\nimport { CacheStore } from './CacheStore';\n\n/**\n * Localstorage key for storing names of cache databases\n *\n * @type {string}\n *\n */\nexport const dbListKey = 'mgt-db-list';\n\n/**\n * Holds the cache options for cache store\n *\n * @export\n * @interface CacheConfig\n */\nexport interface CacheConfig {\n  /**\n   * Default global invalidation period\n   *\n   * @type {number}\n   * @memberof CacheConfig\n   */\n  defaultInvalidationPeriod: number;\n  /**\n   * Controls whether the cache is enabled globally\n   *\n   * @type {boolean}\n   * @memberof CacheConfig\n   */\n  isEnabled: boolean;\n  /**\n   * Cache options for groups store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  groups: CacheOptions;\n  /**\n   * Cache options for people store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  people: CacheOptions;\n  /**\n   * Cache options for photos store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  photos: CacheOptions;\n  /**\n   * Cache options for presence store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n\n  presence: CacheOptions;\n  /**\n   * Cache options for users store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  users: CacheOptions;\n\n  /**\n   * Cache options for a generic response store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  response: CacheOptions;\n\n  /**\n   * Cache options for files store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  files: CacheOptions;\n  /**\n   * Cache options for fileLists store\n   *\n   * @type {CacheOptions}\n   * @memberof CacheConfig\n   */\n  fileLists: CacheOptions;\n}\n\n/**\n * Options for each store\n *\n * @export\n * @interface CacheOptions\n */\nexport interface CacheOptions {\n  /**\n   * Defines the time (in ms) for objects in the store to expire\n   *\n   * @type {number}\n   * @memberof CacheOptions\n   */\n  invalidationPeriod: number;\n  /**\n   * Whether the store is enabled or not\n   *\n   * @type {boolean}\n   * @memberof CacheOptions\n   */\n  isEnabled: boolean;\n}\n\n/**\n * class in charge of managing all the caches and their stores\n *\n * @export\n * @class CacheService\n */\nexport class CacheService {\n  /**\n   * Looks for existing cache, otherwise creates a new one\n   *\n   * @static\n   * @template T\n   * @param {CacheSchema} schema\n   * @param {string} storeName\n   * @returns {CacheStore<T>}\n   * @memberof CacheService\n   */\n  public static getCache<T extends CacheItem>(schema: CacheSchema, storeName: string): CacheStore<T> {\n    const key = `${schema.name}/${storeName}`;\n\n    if (!this.isInitialized) {\n      this.init();\n    }\n\n    if (!this.cacheStore.has(storeName)) {\n      this.cacheStore.set(key, new CacheStore<T>(schema, storeName));\n    }\n    return this.cacheStore.get(key) as CacheStore<T>;\n  }\n\n  /**\n   * Clears cache for a single user when ID is passed\n   *\n   * @static\n   * @param {string} id\n   * @memberof CacheService\n   */\n  public static clearCacheById(id: string): Promise<unknown> {\n    const work: Promise<void>[] = [];\n    const oldDbArray: string[] = JSON.parse(localStorage.getItem(dbListKey)) as string[];\n    if (oldDbArray) {\n      const newDbArray: string[] = [];\n      oldDbArray.forEach(x => {\n        if (x.includes(id)) {\n          work.push(\n            new Promise<void>((resolve, reject) => {\n              const delReq = indexedDB.deleteDatabase(x);\n              delReq.onsuccess = () => resolve();\n              delReq.onerror = () => {\n                console.error(`ðŸ¦’: ${delReq.error.name} occurred deleting cache: ${x}`, delReq.error.message);\n                reject();\n              };\n            })\n          );\n        } else {\n          newDbArray.push(x);\n        }\n      });\n      if (newDbArray.length > 0) {\n        localStorage.setItem(dbListKey, JSON.stringify(newDbArray));\n      } else {\n        localStorage.removeItem(dbListKey);\n      }\n    }\n    return Promise.all(work);\n  }\n\n  private static readonly cacheStore = new Map<string, CacheStore<CacheItem>>();\n  private static isInitialized = false;\n\n  private static readonly cacheConfig: CacheConfig = {\n    defaultInvalidationPeriod: 3600000,\n    groups: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    isEnabled: true,\n    people: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    photos: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    presence: {\n      invalidationPeriod: 300000,\n      isEnabled: true\n    },\n    users: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    response: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    files: {\n      invalidationPeriod: null,\n      isEnabled: true\n    },\n    fileLists: {\n      invalidationPeriod: null,\n      isEnabled: true\n    }\n  };\n\n  /**\n   * returns the cacheconfig object\n   *\n   * @readonly\n   * @static\n   * @type {CacheConfig}\n   * @memberof CacheService\n   */\n  public static get config(): CacheConfig {\n    return this.cacheConfig;\n  }\n\n  /**\n   * Checks for current sign in state and see if it has changed from signed-in to signed out\n   *\n   *\n   * @private\n   * @static\n   * @memberof CacheService\n   */\n  private static init() {\n    let previousState: ProviderState;\n    if (Providers.globalProvider) {\n      previousState = Providers.globalProvider.state;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    Providers.onProviderUpdated(async () => {\n      if (previousState === ProviderState.SignedIn && Providers.globalProvider.state === ProviderState.SignedOut) {\n        const id = await Providers.getCacheId();\n        if (id !== null) {\n          await this.clearCacheById(id);\n        }\n      }\n      previousState = Providers.globalProvider.state;\n    });\n    this.isInitialized = true;\n  }\n}\n\n/**\n * Represents organization for a cache\n *\n * @export\n * @interface CacheSchema\n */\nexport interface CacheSchema {\n  /**\n   * version number of cache, useful for upgrading\n   *\n   * @type {number}\n   * @memberof CacheSchema\n   */\n  version: number;\n  /**\n   * name of the cache\n   *\n   * @type {string}\n   * @memberof CacheSchema\n   */\n  name: string;\n  /**\n   * list of stores in the cache\n   *\n   * @type {{ [name: string]: CacheSchemaStore }}\n   * @memberof CacheSchema\n   */\n  stores: Record<string, string>;\n}\n\n/**\n * item that is stored in cache\n *\n * @export\n * @interface CacheItem\n */\nexport interface CacheItem {\n  /**\n   * date and time that item was retrieved from api/stored in cache\n   *\n   * @type {number}\n   * @memberof CacheItem\n   */\n  timeCached?: number;\n}\n"]}