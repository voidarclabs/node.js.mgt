{"version":3,"file":"GraphHelpers.tests.js","sourceRoot":"src/","sources":["utils/GraphHelpers.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { it } from '@jest/globals';\nimport { AuthenticationHandlerOptions, Middleware } from '@microsoft/microsoft-graph-client';\nimport { MockProvider } from '../mock/MockProvider';\nimport { Providers } from '../providers/Providers';\nimport { chainMiddleware, prepScopes, validateBaseURL } from './GraphHelpers';\n\ndescribe('GraphHelpers - prepScopes', () => {\n  it('should return an empty array when incremental consent is disabled', () => {\n    const scopes = ['scope1', 'scope2'];\n    Providers.globalProvider = new MockProvider(true);\n    Providers.globalProvider.isIncrementalConsentDisabled = true;\n    expect(prepScopes(...scopes)).toEqual([]);\n  });\n  it('should return an array of AuthenticationHandlerOptions when incremental consent is enabled', () => {\n    const scopes = ['scope1', 'scope2'];\n    Providers.globalProvider = new MockProvider(true);\n    Providers.globalProvider.isIncrementalConsentDisabled = false;\n    expect(prepScopes(...scopes)).toEqual([new AuthenticationHandlerOptions(undefined, { scopes })]);\n  });\n});\n\ndescribe('GraphHelpers - chainMiddleware', () => {\n  it('should return the first middleware when only one is passed', () => {\n    const middleware: Middleware[] = [{ execute: jest.fn(), setNext: jest.fn() }];\n    const result = chainMiddleware(...middleware);\n    expect(result).toEqual(middleware[0]);\n  });\n\n  it('should return undefined when the middleware array is empty', () => {\n    const middleware: Middleware[] = [];\n    const result = chainMiddleware(...middleware);\n    expect(result).toBeUndefined();\n  });\n  it('should now throw when the middleware array is undefined', () => {\n    let error: string;\n    try {\n      const result = chainMiddleware(undefined);\n      expect(result).toBeUndefined();\n    } catch (e) {\n      error = 'thrown and caught';\n    }\n    expect(error).toBeUndefined();\n  });\n});\n\ndescribe('GraphHelpers - validateBaseUrl', () => {\n  it.each([\n    'https://graph.microsoft.com',\n    'https://graph.microsoft.us',\n    'https://dod-graph.microsoft.us',\n    'https://graph.microsoft.de',\n    'https://microsoftgraph.chinacloudapi.cn'\n  ])('should return %p as a valid base url', (graphUrl: string) => {\n    expect(validateBaseURL(graphUrl)).toBe(graphUrl);\n  });\n  it.each(['https://graph.microsoft.net', 'https://random.us', 'https://nope.cn'])(\n    'should return undefined for %p as an invalid base url',\n    (graphUrl: string) => {\n      expect(validateBaseURL(graphUrl)).toBeUndefined();\n    }\n  );\n  it.each(['not a url', 'graph.microsoft.com'])(\n    'should return undefined for when supplied a %p which is not a well formed url',\n    (input: string) => {\n      expect(validateBaseURL(input)).toBeUndefined();\n    }\n  );\n});\n"]}