{"version":3,"file":"GraphPageIterator.js","sourceRoot":"src/","sources":["utils/GraphPageIterator.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAMH;;;;;;GAMG;AACH,MAAM,OAAO,iBAAiB;IAC5B;;;;;;OAMG;IACH,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;;;;;;OAMG;IACH,IAAW,OAAO;QAChB,OAAO,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;;;;;;OAWG;IACI,MAAM,CAAO,MAAM,CAAI,KAAa,EAAE,OAAqB,EAAE,OAAgB;;YAClF,MAAM,QAAQ,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,EAAE,CAA0B,CAAC;YAChE,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,EAAE;gBACnB,MAAM,QAAQ,GAAG,IAAI,iBAAiB,EAAK,CAAC;gBAC5C,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;gBACxB,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC;gBACjC,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,iBAAiB,CAAW,CAAC;gBAC3D,QAAQ,CAAC,QAAQ,GAAG,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC;gBAC7C,OAAO,QAAQ,CAAC;aACjB;YAED,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;;;;;OAWG;IACI,MAAM,CAAC,eAAe,CAAI,KAAa,EAAE,KAAU,EAAE,WAAmB,IAAI;QACjF,MAAM,QAAQ,GAAG,IAAI,iBAAiB,EAAK,CAAC;QAE5C,8BAA8B;QAC9B,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;QACxB,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;QACxB,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC9B,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC;QAElC,OAAO,QAAQ,CAAC;IAClB,CAAC;IAID;;;;;;OAMG;IACH,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC;IAC9B,CAAC;IAID;;;;;OAKG;IACU,IAAI;;;YACf,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAA0B,CAAC;gBAC7G,IAAI,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,0CAAE,MAAM,EAAE;oBAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBACjD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,iBAAiB,CAAW,CAAC;oBACvD,OAAO,QAAQ,CAAC,KAAK,CAAC;iBACvB;aACF;YACD,OAAO,IAAI,CAAC;;KACb;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphRequest } from '@microsoft/microsoft-graph-client';\nimport { IGraph } from '../IGraph';\nimport { CollectionResponse } from '../CollectionResponse';\n\n/**\n * A helper class to assist in getting multiple pages from a resource\n *\n * @export\n * @class GraphPageIterator\n * @template T\n */\nexport class GraphPageIterator<T> {\n  /**\n   * Gets all the items already fetched for this request\n   *\n   * @readonly\n   * @type {T[]}\n   * @memberof GraphPageIterator\n   */\n  public get value(): T[] {\n    return this._value;\n  }\n\n  /**\n   * Gets wheather this request has more pages\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof GraphPageIterator\n   */\n  public get hasNext(): boolean {\n    return Boolean(this._nextLink);\n  }\n\n  /**\n   * Creates a new GraphPageIterator\n   *\n   * @static\n   * @template T - the type of entities expected from this request\n   * @param {IGraph} graph - the graph instance to use for making requests\n   * @param {GraphRequest} request - the initial request\n   * @param {string} [version] - optional version to use for the requests - by default uses the default version\n   * from the graph parameter\n   * @returns a GraphPageIterator\n   * @memberof GraphPageIterator\n   */\n  public static async create<T>(graph: IGraph, request: GraphRequest, version?: string): Promise<GraphPageIterator<T>> {\n    const response = (await request.get()) as CollectionResponse<T>;\n    if (response?.value) {\n      const iterator = new GraphPageIterator<T>();\n      iterator._graph = graph;\n      iterator._value = response.value;\n      iterator._nextLink = response['@odata.nextLink'] as string;\n      iterator._version = version || graph.version;\n      return iterator;\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a new GraphPageIterator from existing value\n   *\n   * @static\n   * @template T - the type of entities expected from this request\n   * @param {IGraph} graph - the graph instance to use for making requests\n   * @param value - the existing value\n   * @param nextLink - optional nextLink to use to get the next page\n   * from the graph parameter\n   * @returns a GraphPageIterator\n   * @memberof GraphPageIterator\n   */\n  public static createFromValue<T>(graph: IGraph, value: T[], nextLink: string = null): GraphPageIterator<T> {\n    const iterator = new GraphPageIterator<T>();\n\n    // create iterator from values\n    iterator._graph = graph;\n    iterator._value = value;\n    iterator._nextLink = nextLink;\n    iterator._version = graph.version;\n\n    return iterator;\n  }\n\n  private _graph: IGraph;\n  private _nextLink: string;\n  /**\n   * Gets the next link for this request\n   *\n   * @readonly\n   * @type {string}\n   * @memberof GraphPageIterator\n   */\n  public get nextLink(): string {\n    return this._nextLink || '';\n  }\n  private _version: string;\n  private _value: T[];\n\n  /**\n   * Gets the next page for this request\n   *\n   * @returns {Promise<T[]>}\n   * @memberof GraphPageIterator\n   */\n  public async next(): Promise<T[]> {\n    if (this._nextLink) {\n      const nextResource = this._nextLink.split(this._version)[1];\n      const response = (await this._graph.api(nextResource).version(this._version).get()) as CollectionResponse<T>;\n      if (response?.value?.length) {\n        this._value = this._value.concat(response.value);\n        this._nextLink = response['@odata.nextLink'] as string;\n        return response.value;\n      }\n    }\n    return null;\n  }\n}\n"]}