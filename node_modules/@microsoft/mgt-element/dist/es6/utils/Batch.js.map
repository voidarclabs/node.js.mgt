{"version":3,"file":"Batch.js","sourceRoot":"src/","sources":["utils/Batch.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { BatchResponse, BatchResponseBody, IBatch } from '../IBatch';\nimport { BatchRequestContent, MiddlewareOptions } from '@microsoft/microsoft-graph-client';\nimport { delay } from '../utils';\nimport { prepScopes } from './GraphHelpers';\nimport { IGraph } from '../IGraph';\nimport { BatchRequest } from './BatchRequest';\n\n/**\n * Method to reduce repetitive requests to the Graph\n *\n * @export\n * @class Batch\n */\nexport class Batch<T = any> implements IBatch<T> {\n  // this doesn't really mater what it is as long as it's a root base url\n  // otherwise a Request assumes the current path and that could change the relative path\n  private static get baseUrl() {\n    return 'https://graph.microsoft.com';\n  }\n\n  private readonly allRequests: BatchRequest[];\n  private readonly requestsQueue: number[];\n  private scopes: string[];\n  private retryAfter: number;\n\n  private readonly graph: IGraph;\n\n  private nextIndex: number;\n\n  constructor(graph: IGraph) {\n    this.graph = graph;\n    this.allRequests = [];\n    this.requestsQueue = [];\n    this.scopes = [];\n    this.nextIndex = 0;\n    this.retryAfter = 0;\n  }\n\n  /**\n   * Get whether there are requests that have not been executed\n   *\n   * @readonly\n   * @memberof Batch\n   */\n  public get hasRequests() {\n    return this.requestsQueue.length > 0;\n  }\n\n  /**\n   * sets new request and scopes\n   *\n   * @param {string} id\n   * @param {string} resource\n   * @param {string[]} [scopes]\n   * @memberof Batch\n   */\n  public get(id: string, resource: string, scopes?: string[], headers?: Record<string, string>) {\n    const index = this.nextIndex++;\n    const request = new BatchRequest(index, id, resource, 'GET');\n    request.headers = headers;\n    this.allRequests.push(request);\n    this.requestsQueue.push(index);\n    if (scopes) {\n      this.scopes = this.scopes.concat(scopes);\n    }\n  }\n\n  /**\n   * Execute the next set of requests.\n   * This will execute up to 20 requests at a time\n   *\n   * @returns {Promise<Map<string, BatchResponse<T>>>}\n   * @memberof Batch\n   */\n  public async executeNext(): Promise<Map<string, BatchResponse<T>>> {\n    const responses = new Map<string, BatchResponse<T>>();\n\n    if (this.retryAfter) {\n      await delay(this.retryAfter * 1000);\n      this.retryAfter = 0;\n    }\n\n    if (!this.hasRequests) {\n      return responses;\n    }\n\n    // batch can support up to 20 requests\n    const nextBatch = this.requestsQueue.splice(0, 20);\n\n    const batchRequestContent = new BatchRequestContent();\n\n    for (const request of nextBatch.map(i => this.allRequests[i])) {\n      batchRequestContent.addRequest({\n        id: request.index.toString(),\n        request: new Request(Batch.baseUrl + request.resource, {\n          method: request.method,\n          headers: request.headers\n        })\n      });\n    }\n\n    const middlewareOptions: MiddlewareOptions[] = this.scopes.length ? prepScopes(...this.scopes) : [];\n    const batchRequest = this.graph.api('$batch').middlewareOptions(middlewareOptions);\n\n    const batchRequestBody = await batchRequestContent.getContent();\n    const batchResponse: BatchResponseBody = (await batchRequest.post(batchRequestBody)) as BatchResponseBody;\n\n    for (const r of batchResponse.responses) {\n      const response = new BatchResponse();\n      const index = parseInt(r.id, 10);\n      const request: BatchRequest = this.allRequests[index];\n\n      response.id = request.id;\n      response.index = request.index;\n      response.headers = r.headers;\n\n      if (r.status !== 200) {\n        if (r.status === 429) {\n          // this request was throttled\n          // add request back to queue and set retry wait time\n          this.requestsQueue.unshift(index);\n          const requestRetryAfter = r.headers['Retry-After'];\n          this.retryAfter = Math.max(this.retryAfter, parseInt(requestRetryAfter, 10) || 1);\n        }\n        continue;\n      } else if (typeof r.body === 'string') {\n        if (r.headers['Content-Type'].includes('image/jpeg')) {\n          response.content = 'data:image/jpeg;base64,' + r.body;\n        } else if (r.headers['Content-Type'].includes('image/pjpeg')) {\n          response.content = 'data:image/pjpeg;base64,' + r.body;\n        } else if (r.headers['Content-Type'].includes('image/png')) {\n          response.content = 'data:image/png;base64,' + r.body;\n        }\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        response.content = r.body;\n      }\n\n      responses.set(request.id, response as BatchResponse<T>);\n    }\n\n    return responses;\n  }\n\n  /**\n   * Execute all requests, up to 20 at a time until\n   * all requests have been executed\n   *\n   * @returns {Promise<Map<string, BatchResponse<T>>>}\n   * @memberof Batch\n   */\n  public async executeAll(): Promise<Map<string, BatchResponse<T>>> {\n    const responses = new Map<string, BatchResponse<T>>();\n\n    while (this.hasRequests) {\n      const r = await this.executeNext();\n      for (const [key, value] of r) {\n        responses.set(key, value);\n      }\n    }\n\n    return responses;\n  }\n}\n"]}