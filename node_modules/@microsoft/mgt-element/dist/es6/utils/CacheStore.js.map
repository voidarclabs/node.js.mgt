{"version":3,"file":"CacheStore.js","sourceRoot":"src/","sources":["utils/CacheStore.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { openDB } from 'idb';\nimport { Providers } from '../providers/Providers';\nimport { CacheItem, CacheSchema, dbListKey } from './CacheService';\n\n/**\n * Represents a store in the cache\n *\n * @class CacheStore\n * @template T\n */\n\nexport class CacheStore<T extends CacheItem> {\n  private readonly schema: CacheSchema;\n  private readonly store: string;\n\n  public constructor(schema: CacheSchema, store: string) {\n    if (!(store in schema.stores)) {\n      throw Error('\"store\" must be defined in the \"schema\"');\n    }\n\n    this.schema = schema;\n    this.store = store;\n  }\n\n  /**\n   * gets value from cache for the given key\n   *\n   * @param {string} key\n   * @returns {Promise<T>}\n   * @memberof Cache\n   */\n  public async getValue(key: string): Promise<T> {\n    if (!window.indexedDB) {\n      return null;\n    }\n    try {\n      const db = await this.getDb();\n      return db.get(this.store, key) as unknown as T;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * inserts value into cache for the given key\n   *\n   * @param {string} key\n   * @param {T} item\n   * @returns\n   * @memberof Cache\n   */\n  public async putValue(key: string, item: T) {\n    if (!window.indexedDB) {\n      return;\n    }\n    try {\n      await (await this.getDb()).put(this.store, { ...item, timeCached: Date.now() }, key);\n    } catch (e) {\n      return;\n    }\n  }\n\n  /**\n   * Clears the store of all stored values\n   *\n   * @returns\n   * @memberof Cache\n   */\n  public async clearStore() {\n    if (!window.indexedDB) {\n      return;\n    }\n    try {\n      await (await this.getDb()).clear(this.store);\n    } catch (e) {\n      return;\n    }\n  }\n\n  /**\n   * Returns the name of the parent DB that the cache store belongs to\n   */\n  public async getDBName() {\n    const id = await Providers.getCacheId();\n    if (id) {\n      return `mgt-${this.schema.name}` + `-${id}`;\n    }\n  }\n\n  private async getDb() {\n    const dbName = await this.getDBName();\n    if (dbName) {\n      return openDB(dbName, this.schema.version, {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        upgrade: (db, _oldVersion, _newVersion, _transaction) => {\n          const dbArray: string[] = (JSON.parse(localStorage.getItem(dbListKey)) as string[]) || [];\n          if (!dbArray.includes(dbName)) {\n            dbArray.push(dbName);\n          }\n          localStorage.setItem(dbListKey, JSON.stringify(dbArray));\n          for (const storeName in this.schema.stores) {\n            if (\n              Object.prototype.hasOwnProperty.call(this.schema.stores, storeName) &&\n              !db.objectStoreNames.contains(storeName)\n            ) {\n              db.createObjectStore(storeName);\n            }\n          }\n        }\n      });\n    }\n  }\n}\n"]}