{"version":3,"file":"equals.tests.js","sourceRoot":"src/","sources":["utils/equals.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { it } from '@jest/globals';\nimport { equals } from './equals';\n\ndescribe('objectEquals', () => {\n  const circularObject = { a: undefined };\n  circularObject.a = circularObject;\n\n  const circularArray: unknown[] = [];\n  circularArray[0] = circularArray;\n\n  // Any other object that is not an object literal or an array will compare by reference\n  const simpleDate = new Date(0);\n\n  it.each([\n    [{}, {}],\n    [\n      { a: 1, b: true, c: 'foo' },\n      { c: 'foo', b: true, a: 1 }\n    ],\n    [{ a: [1, 2, 3] }, { a: [1, 2, 3] }],\n    [{ a: { b: { c: 1 } } }, { a: { b: { c: 1 } } }],\n    [{ a: [1, [2, [3]]] }, { a: [1, [2, [3]]] }],\n    [circularObject, circularObject],\n    [circularObject, { a: circularObject }],\n    [circularArray, circularArray],\n    [\n      { a: circularObject, b: circularArray },\n      { a: circularObject, b: circularArray }\n    ],\n    [{ a: simpleDate }, { a: simpleDate }]\n  ])('should return true between %p and %p', (o1: unknown, o2: unknown) => {\n    expect(equals(o1, o2)).toBe(true);\n  });\n\n  it.each([\n    [{ a: {} }, { a: [] }],\n    [{ a: [1, 2, 3] }, { a: [3, 2, 1] }],\n    [{ a: [1, [2, [3]]] }, { a: [1, [2, [4]]] }],\n    [{ a: { b: [{ c: 1 }, { d: [2, 3] }] } }, { a: { b: [{ c: 1 }, { d: [3, 2] }] } }],\n    [{ a: new Date() }, { a: new Date() }],\n    [circularObject, circularArray],\n    [circularObject, { b: circularObject }]\n  ])('should return false between %p and %p', (o1: unknown, o2: unknown) => {\n    expect(equals(o1, o2)).toBe(false);\n  });\n});\n"]}