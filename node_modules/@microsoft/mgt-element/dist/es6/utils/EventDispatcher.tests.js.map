{"version":3,"file":"EventDispatcher.tests.js","sourceRoot":"src/","sources":["utils/EventDispatcher.tests.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,EAAE,EAAE,MAAM,eAAe,CAAC;AACnC,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;QACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC3B,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzB,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzB,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,MAAM,CAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC1C,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC5B,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,MAAM,CAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;QAC7E,IAAI;YACF,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC3B,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAC7B;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;SACnC;QACD,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { it } from '@jest/globals';\nimport { assert } from 'console';\nimport { EventDispatcher } from './EventDispatcher';\n\ndescribe('EventDispatcher tests', () => {\n  it('should add and remove event handlers', () => {\n    const dispatcher = new EventDispatcher();\n    const handler1 = jest.fn();\n    const handler2 = jest.fn();\n    dispatcher.add(handler1);\n    dispatcher.add(handler2);\n    dispatcher.fire('event');\n    expect(handler1).toHaveBeenCalledTimes(1);\n    expect(handler2).toHaveBeenCalledTimes(1);\n    dispatcher.remove(handler1);\n    dispatcher.fire('event');\n    expect(handler1).toHaveBeenCalledTimes(1);\n    expect(handler2).toHaveBeenCalledTimes(2);\n  });\n  it('should not throw when remove is called with an unregistered handler', () => {\n    try {\n      const dispatcher = new EventDispatcher();\n      const handler1 = jest.fn();\n      dispatcher.remove(handler1);\n    } catch (e) {\n      assert(false, 'should not throw');\n    }\n    assert(true, 'did not throw');\n  });\n});\n"]}