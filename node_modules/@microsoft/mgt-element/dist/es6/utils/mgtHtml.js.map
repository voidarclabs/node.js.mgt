{"version":3,"file":"mgtHtml.js","sourceRoot":"src/","sources":["utils/mgtHtml.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAsB,IAAI,EAAE,MAAM,KAAK,CAAC;AAC/C,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AAExE;;;;;GAKG;AACH,MAAM,YAAY,GAAG,IAAI,OAAO,EAA8C,CAAC;AAE/E;;;;;;GAMG;AACH,MAAM,cAAc,GAAG,CAAC,OAA0B,EAAE,OAAe,EAAE,WAAmB,EAAqB,EAAE;IAC7G,MAAM,IAAI,GAAa,EAAE,CAAC;IAC1B,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;QACvB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;KAC5C;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,GAAG,GAAG,CAAC,OAA6B,EAAE,GAAG,MAAiB,EAAsB,EAAE;IACtF,sCAAsC;IACtC,IAAI,mBAAmB,CAAC,eAAe,EAAE;QACvC,IAAI,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,cAAc,GAAG,mBAAmB,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;YACvF,MAAM,SAAS,GAAG,KAAK,mBAAmB,CAAC,MAAM,GAAG,CAAC;YACrD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,EAAE;gBAClE,GAAG,EAAE,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,EAAE,SAAS,CAAC;aACrD,CAAC,CAAC;YACH,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACnC;QACD,OAAO,GAAG,MAAM,CAAC;KAClB;IAED,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;AAClC,CAAC,CAAC;AAEF;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG,GAAG,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { HTMLTemplateResult, html } from 'lit';\nimport { customElementHelper } from '../components/customElementHelper';\n\n/**\n * stringsCache ensures that the same TemplateStringsArray object is returned on subsequent calls\n * This is needed as lit-html internally uses the TemplateStringsArray object as a cache key.\n *\n * @type {WeakMap}\n */\nconst stringsCache = new WeakMap<TemplateStringsArray, TemplateStringsArray>();\n\n/**\n * Rewrites strings in an array using the supplied matcher RegExp\n * Assumes that the RegExp returns a group on matches\n *\n * @param strings The array of strings to be re-written\n * @param matcher A RegExp to be used for matching strings for replacement\n */\nconst rewriteStrings = (strings: readonly string[], matcher: RegExp, replacement: string): readonly string[] => {\n  const temp: string[] = [];\n  for (const s of strings) {\n    temp.push(s.replace(matcher, replacement));\n  }\n  return temp;\n};\n\n/**\n * Generates a template literal tag function that returns an HTMLTemplateResult.\n */\nconst tag = (strings: TemplateStringsArray, ...values: unknown[]): HTMLTemplateResult => {\n  // re-write <mgt-([a-z]+) if necessary\n  if (customElementHelper.isDisambiguated) {\n    let cached = stringsCache.get(strings);\n    if (!cached) {\n      const matcher = new RegExp('(</?)mgt-(?!' + customElementHelper.disambiguation + '-)');\n      const newPrefix = `$1${customElementHelper.prefix}-`;\n      cached = Object.assign(rewriteStrings(strings, matcher, newPrefix), {\n        raw: rewriteStrings(strings.raw, matcher, newPrefix)\n      });\n      stringsCache.set(strings, cached);\n    }\n    strings = cached;\n  }\n\n  return html(strings, ...values);\n};\n\n/**\n * Interprets a template literal and dynamically rewrites `<mgt-` tags with the\n * configured disambiguation if necessary.\n *\n * ```ts\n * const header = (title: string) => mgtHtml`<mgt-flyout>${title}</mgt-flyout>`;\n * ```\n *\n * The `mgtHtml` tag is a wrapper for the `html` tag from `lit` which provides for dynamic tag re-writing\n */\nexport const mgtHtml = tag;\n"]}