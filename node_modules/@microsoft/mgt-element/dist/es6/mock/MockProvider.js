/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { IProvider, ProviderState } from '../providers/IProvider';
import { MockGraph } from './MockGraph';
/**
 * Mock Provider access token for Microsoft Graph APIs
 *
 * @export
 * @class MockProvider
 * @extends {IProvider}
 */
export class MockProvider extends IProvider {
    constructor(signedIn = false, signedInAccounts = []) {
        super();
        this._accounts = [];
        this._mockGraphPromise = MockGraph.create(this);
        const enableMultipleLogin = Boolean(signedInAccounts.length);
        this.isMultipleAccountSupported = enableMultipleLogin;
        this.isMultipleAccountDisabled = !enableMultipleLogin;
        this._accounts = signedInAccounts;
        void this.initializeMockGraph(signedIn);
    }
    /**
     * Indicates if the MockProvider is configured to support multi account mode
     * This is only true if the Mock provider has been configured with signedInAccounts in the constructor
     *
     * @readonly
     * @type {boolean}
     * @memberof MockProvider
     */
    get isMultiAccountSupportedAndEnabled() {
        return !this.isMultipleAccountDisabled && this.isMultipleAccountSupported;
    }
    /**
     * Returns the array of accounts the MockProviders has been configured with
     *
     * @return {*}  {IProviderAccount[]}
     * @memberof MockProvider
     */
    getAllAccounts() {
        return this._accounts;
    }
    /**
     * Returns the first account in the set of accounts the MockProvider has been configured with
     *
     * @return {*}  {IProviderAccount}
     * @memberof MockProvider
     */
    getActiveAccount() {
        if (this._accounts.length) {
            return this._accounts[0];
        }
    }
    /**
     * sets Provider state to SignedIn
     *
     * @returns {Promise<void>}
     * @memberof MockProvider
     */
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            this.setState(ProviderState.Loading);
            yield this._mockGraphPromise;
            yield new Promise(resolve => setTimeout(resolve, 3000));
            this.setState(ProviderState.SignedIn);
        });
    }
    /**
     * sets Provider state to signed out
     *
     * @returns {Promise<void>}
     * @memberof MockProvider
     */
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            this.setState(ProviderState.Loading);
            yield this._mockGraphPromise;
            yield new Promise(resolve => setTimeout(resolve, 3000));
            this.setState(ProviderState.SignedOut);
        });
    }
    /**
     * Promise returning token from graph.microsoft.com
     *
     * @returns {Promise<string>}
     * @memberof MockProvider
     */
    getAccessToken() {
        return Promise.resolve('{token:https://graph.microsoft.com/}');
    }
    /**
     * Name used for analytics
     *
     * @readonly
     * @memberof IProvider
     */
    get name() {
        return 'MgtMockProvider';
    }
    initializeMockGraph(signedIn = false) {
        return __awaiter(this, void 0, void 0, function* () {
            this.graph = yield this._mockGraphPromise;
            if (signedIn) {
                this.setState(ProviderState.SignedIn);
            }
            else {
                this.setState(ProviderState.SignedOut);
            }
        });
    }
}
//# sourceMappingURL=MockProvider.js.map