/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AuthenticationHandler, Client, HTTPMessageHandler, RetryHandler, RetryHandlerOptions, TelemetryHandler } from '@microsoft/microsoft-graph-client';
import { Graph } from '../Graph';
import { chainMiddleware } from '../utils/GraphHelpers';
import { MockMiddleware } from './MockMiddleware';
/**
 * MockGraph Instance
 *
 * @export
 * @class MockGraph
 * @extends {Graph}
 */
export class MockGraph extends Graph {
    /**
     * Creates a new MockGraph instance. Use this static method instead of the constructor.
     *
     * @static
     * @param {MockProvider} provider
     * @return {*}  {Promise<MockGraph>}
     * @memberof MockGraph
     */
    static create(provider) {
        return __awaiter(this, void 0, void 0, function* () {
            const middleware = [
                new AuthenticationHandler(provider),
                new RetryHandler(new RetryHandlerOptions()),
                new TelemetryHandler(),
                new MockMiddleware(),
                new HTTPMessageHandler()
            ];
            return new MockGraph(Client.initWithMiddleware({
                middleware: chainMiddleware(...middleware),
                customHosts: new Set([new URL(yield MockMiddleware.getBaseUrl()).hostname])
            }));
        });
    }
    /**
     * Returns an instance of the Graph in the context of the provided component.
     *
     * @param {MgtBaseComponent} component
     * @returns
     * @memberof Graph
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    forComponent(component) {
        // The purpose of the forComponent pattern is to update the headers of any outgoing Graph requests.
        // The MockGraph isn't making real Graph requests, so we can simply no-op and return the same instance.
        return this;
    }
}
//# sourceMappingURL=MockGraph.js.map