{"version":3,"file":"IBatch.js","sourceRoot":"src/","sources":["IBatch.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH;;;;;GAKG;AACH,MAAM,OAAO,aAAa;CAkCzB","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * Represents a response from a request executed in a batch\n *\n * @export\n * @class BatchResponse\n */\nexport class BatchResponse<T = any> {\n  /**\n   * The index of the requests as it was added to the queue\n   * Use this value if you need to sort the responses\n   * in the order they were added\n   *\n   * @type {number}\n   * @memberof BatchResponse\n   */\n  public index: number;\n\n  /**\n   * The id of the requests\n   *\n   * @type {string}\n   * @memberof BatchResponse\n   */\n  public id: string;\n\n  /**\n   * The content of the response\n   *\n   * @type {*}\n   * @memberof BatchResponse\n   */\n  public content: T;\n\n  /**\n   * The header of the response\n   *\n   * @type {*}\n   * @memberof BatchResponse\n   */\n  public headers: Record<string, string>;\n}\n\n/**\n * Represents a response from a request executed in a batch\n *\n * @interface ResponseWithBodyAndStatus\n */\ninterface ResponseWithBodyAndStatus {\n  /**\n   * The body of the response\n   *\n   * @type {string}\n   * @memberof BatchResponse\n   */\n  body: any;\n\n  /**\n   * The status code of the response\n   *\n   * @type {number}\n   * @memberof BatchResponse\n   */\n  status: number;\n}\n\n/**\n * Wrapper for the response body of a batch request\n */\nexport interface BatchResponseBody {\n  /**\n   * Collection of responses from the batch request\n   *\n   * @type {BatchResponse[]}\n   * @memberof BatchResponseBody\n   */\n  responses: (Omit<BatchResponse, 'content'> & ResponseWithBodyAndStatus)[];\n}\n\n/**\n * Represents a collection of Graph requests to be sent simultaneously.\n *\n * @export\n * @interface IBatch\n */\nexport interface IBatch<T = any> {\n  /**\n   * Get whether there are requests that have not been executed\n   *\n   * @readonly\n   * @memberof IBatch\n   */\n  readonly hasRequests: boolean;\n\n  /**\n   * sets new request and scopes\n   *\n   * @param {string} id\n   * @param {string} resource\n   * @param {string[]} [scopes]\n   * @param {{ [header: string]: string }} [headers]\n   * @memberof IBatch\n   */\n  get(id: string, resource: string, scopes?: string[], headers?: Record<string, string>);\n\n  /**\n   * Execute the next set of requests.\n   * This will execute up to 20 requests at a time\n   *\n   * @returns {Promise<Map<string, BatchResponse<T>>>}\n   * @memberof IBatch\n   */\n  executeNext(): Promise<Map<string, BatchResponse<T>>>;\n\n  /**\n   * Execute all requests, up to 20 at a time until\n   * all requests have been executed\n   *\n   * @returns {Promise<Map<string, BatchResponse<T>>>}\n   * @memberof IBatch\n   */\n  executeAll(): Promise<Map<string, BatchResponse<T>>>;\n}\n"]}