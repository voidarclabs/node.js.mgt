/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
import { validateBaseURL } from '../utils/GraphHelpers';
import { MICROSOFT_GRAPH_DEFAULT_ENDPOINT } from '../IGraph';
import { EventDispatcher } from '../utils/EventDispatcher';
/**
 * Provider Type to be extended for implmenting new providers
 *
 * @export
 * @abstract
 * @class IProvider
 * @implements {AuthenticationProvider}
 */
export class IProvider {
    /**
     * Specifies if Multi account functionality is supported by the provider and enabled.
     *
     * @readonly
     * @type {boolean}
     * @memberof IProvider
     */
    get isMultiAccountSupportedAndEnabled() {
        return false;
    }
    /**
     * The base URL to be used in the graph client config.
     */
    set baseURL(url) {
        if (validateBaseURL(url)) {
            this._baseURL = url;
            return;
        }
        else {
            throw new Error(`${url} is not a valid Graph URL endpoint.`);
        }
    }
    get baseURL() {
        return this._baseURL;
    }
    /**
     * Custom Hostnames to allow graph client to utilize
     */
    set customHosts(hosts) {
        this._customHosts = hosts;
    }
    get customHosts() {
        return this._customHosts;
    }
    /**
     * Does the provider support multiple accounts?
     *
     * @readonly
     * @type {boolean}
     * @memberof IProvider
     */
    get isMultiAccountSupported() {
        return this.isMultipleAccountSupported;
    }
    /**
     * returns state of Provider
     *
     * @readonly
     * @type {ProviderState}
     * @memberof IProvider
     */
    get state() {
        return this._state;
    }
    /**
     * Incremental consent setting
     *
     * @readonly
     * @memberof IProvider
     */
    get isIncrementalConsentDisabled() {
        return this._isIncrementalConsentDisabled;
    }
    /**
     * Enable/Disable incremental consent
     *
     * @readonly
     * @memberof IProvider
     */
    set isIncrementalConsentDisabled(disabled) {
        this._isIncrementalConsentDisabled = disabled;
    }
    /**
     * Name used for analytics
     *
     * @readonly
     * @memberof IProvider
     */
    get name() {
        return 'MgtIProvider';
    }
    constructor() {
        /**
         * Specifies if the provider has enabled support for multiple accounts
         *
         * @protected
         * @type {boolean}
         * @memberof IProvider
         */
        this.isMultipleAccountDisabled = true;
        this._loginChangedDispatcher = new EventDispatcher();
        this._activeAccountChangedDispatcher = new EventDispatcher();
        this._baseURL = MICROSOFT_GRAPH_DEFAULT_ENDPOINT;
        this._customHosts = undefined;
        /**
         * Enable/Disable incremental consent
         *
         * @protected
         * @type {boolean}
         * @memberof IProvider
         */
        this._isIncrementalConsentDisabled = false;
        /**
         * Backing field for isMultiAccountSupported
         *
         * @protected
         * @memberof IProvider
         */
        this.isMultipleAccountSupported = false;
        this._state = ProviderState.Loading;
    }
    /**
     * sets state of Provider and fires loginchangedDispatcher
     *
     * @param {ProviderState} state
     * @memberof IProvider
     */
    setState(state) {
        if (state !== this._state) {
            this._state = state;
            this._loginChangedDispatcher.fire({});
        }
    }
    /**
     * event handler when login changes
     *
     * @param {EventHandler<LoginChangedEvent>} eventHandler
     * @memberof IProvider
     */
    onStateChanged(eventHandler) {
        this._loginChangedDispatcher.add(eventHandler);
    }
    /**
     * removes event handler for when login changes
     *
     * @param {EventHandler<LoginChangedEvent>} eventHandler
     * @memberof IProvider
     */
    removeStateChangedHandler(eventHandler) {
        this._loginChangedDispatcher.remove(eventHandler);
    }
    /**
     * Switch between two signed in accounts
     *
     * @param {*} user
     * @memberof IProvider
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setActiveAccount(user) {
        this.fireActiveAccountChanged();
    }
    /**
     * Event handler when Active account changes
     *
     * @param {EventHandler<ActiveAccountChanged>} eventHandler
     * @memberof IProvider
     */
    onActiveAccountChanged(eventHandler) {
        this._activeAccountChangedDispatcher.add(eventHandler);
    }
    /**
     * Removes event handler for when Active account changes
     *
     * @param {EventHandler<ActiveAccountChanged>} eventHandler
     * @memberof IProvider
     */
    removeActiveAccountChangedHandler(eventHandler) {
        this._activeAccountChangedDispatcher.remove(eventHandler);
    }
    /**
     * Fires event when active account changes
     *
     * @memberof IProvider
     */
    fireActiveAccountChanged() {
        this._activeAccountChangedDispatcher.fire({});
    }
    /**
     * uses scopes to recieve access token
     *
     * @param {...string[]} scopes
     * @returns {Promise<string>}
     * @memberof IProvider
     */
    getAccessTokenForScopes(...scopes) {
        return this.getAccessToken({ scopes });
    }
}
/**
 * LoginType
 *
 * @export
 * @enum {number}
 */
export var LoginType;
(function (LoginType) {
    /**
     * Popup = 0
     */
    LoginType[LoginType["Popup"] = 0] = "Popup";
    /**
     * Redirect = 1
     */
    LoginType[LoginType["Redirect"] = 1] = "Redirect";
})(LoginType || (LoginType = {}));
/**
 * ProviderState
 *
 * @export
 * @enum {number}
 */
export var ProviderState;
(function (ProviderState) {
    /**
     * Loading = 0
     */
    ProviderState[ProviderState["Loading"] = 0] = "Loading";
    /**
     * SignedOut = 1
     */
    ProviderState[ProviderState["SignedOut"] = 1] = "SignedOut";
    /**
     * SignedIn = 2
     */
    ProviderState[ProviderState["SignedIn"] = 2] = "SignedIn";
})(ProviderState || (ProviderState = {}));
//# sourceMappingURL=IProvider.js.map