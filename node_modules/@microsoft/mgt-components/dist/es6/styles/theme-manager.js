/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
import { accentBaseColor, accentFillActive, accentFillFocus, accentFillHover, accentFillRest, accentForegroundActive, accentForegroundFocus, accentForegroundHover, accentForegroundRest, accentStrokeControlActive, accentStrokeControlFocus, accentStrokeControlHover, accentStrokeControlRest, baseLayerLuminance, foregroundOnAccentActive, foregroundOnAccentFocus, foregroundOnAccentHover, foregroundOnAccentRest, neutralBaseColor, StandardLuminance, SwatchRGB } from '@fluentui/web-components';
import { DesignToken } from '@microsoft/fast-foundation';
// @microsoft/fast-colors is a transitive dependency of @fluentui/web-components, no need to explicitly add it to package.json
import { parseColorHexRGB } from '@microsoft/fast-colors';
const secondaryTextDefault = '#717171';
const secondaryTextColor = DesignToken.create('secondary-text-color').withDefault(secondaryTextDefault);
const secondaryTextHoverDefault = '#1a1a1a';
const secondaryTextHoverColor = DesignToken.create('secondary-text-hover-color').withDefault(secondaryTextHoverDefault);
/**
 * Helper function to apply fluent ui theme to an element
 *
 * @export
 * @param {Theme} theme - theme name, if an unknown theme is provided, the light theme will be applied
 * @param {HTMLElement} [element=document.body]
 */
export const applyTheme = (theme, element = document.body) => {
    const settings = getThemeSettings(theme);
    applyColorScheme(settings, element);
};
/**
 * Helper function to apply fluent ui color scheme to an element
 *
 * @param {ColorScheme} settings
 * @param {HTMLElement} [element=document.body]
 */
const applyColorScheme = (settings, element = document.body) => {
    var _a;
    accentBaseColor.setValueFor(element, SwatchRGB.from(parseColorHexRGB(settings.accentBaseColor)));
    neutralBaseColor.setValueFor(element, SwatchRGB.from(parseColorHexRGB(settings.neutralBaseColor)));
    baseLayerLuminance.setValueFor(element, settings.baseLayerLuminance);
    (_a = settings.designTokenOverrides) === null || _a === void 0 ? void 0 : _a.call(settings, element);
};
/**
 * Helper function to translate theme name to theme settings
 *
 * @param {Theme} theme
 * @return {*}  {ThemeSettings}
 */
const getThemeSettings = (theme) => {
    switch (theme) {
        case 'contrast':
            return {
                accentBaseColor: '#7f85f5',
                neutralBaseColor: '#adadad',
                baseLayerLuminance: StandardLuminance.DarkMode
            };
        case 'default': // this is the Teams light theme
            return {
                accentBaseColor: '#5b5fc7',
                neutralBaseColor: '#616161',
                baseLayerLuminance: StandardLuminance.LightMode
            };
        case 'dark': // Both MGT default dark and Teams Dark theme
            return {
                accentBaseColor: '#479ef5',
                neutralBaseColor: '#adadad',
                baseLayerLuminance: StandardLuminance.DarkMode,
                designTokenOverrides: element => {
                    accentFillRest.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#115ea3')));
                    accentFillHover.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#0f6cbd')));
                    accentFillActive.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#0c3b5e')));
                    accentFillFocus.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#0f548c')));
                    accentForegroundRest.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#479EF5')));
                    accentForegroundHover.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#62abf5')));
                    accentForegroundActive.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#2886de')));
                    accentForegroundFocus.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#479ef5')));
                    accentStrokeControlRest.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#115ea3')));
                    accentStrokeControlHover.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#0f6cbd')));
                    accentStrokeControlActive.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#0c3b5e')));
                    accentStrokeControlFocus.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#0f548c')));
                    foregroundOnAccentActive.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#ffffff')));
                    foregroundOnAccentRest.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#ffffff')));
                    foregroundOnAccentHover.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#ffffff')));
                    foregroundOnAccentFocus.setValueFor(element, SwatchRGB.from(parseColorHexRGB('#ffffff')));
                    secondaryTextColor.setValueFor(element, '#8e8e8e');
                    secondaryTextHoverColor.setValueFor(element, '#ffffff');
                }
            };
        case 'light':
        default:
            return {
                accentBaseColor: '#0f6cbd',
                neutralBaseColor: '#616161',
                baseLayerLuminance: StandardLuminance.LightMode,
                designTokenOverrides: element => {
                    secondaryTextColor.setValueFor(element, secondaryTextDefault);
                    secondaryTextHoverColor.setValueFor(element, secondaryTextHoverDefault);
                }
            };
    }
};
//# sourceMappingURL=theme-manager.js.map