{"version":3,"file":"graph.userWithPhoto.js","sourceRoot":"src/","sources":["graph/graph.userWithPhoto.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { CacheService, IGraph, prepScopes } from '@microsoft/mgt-element';\n\nimport {\n  CachePhoto,\n  getIsPhotosCacheEnabled,\n  getPhotoForResource,\n  getPhotoFromCache,\n  getPhotoInvalidationTime,\n  storePhotoInCache\n} from './graph.photos';\nimport { CacheUser, getIsUsersCacheEnabled, getUserInvalidationTime } from './graph.user';\nimport { IDynamicPerson } from './types';\nimport { schemas } from './cacheStores';\nimport { Photo } from '@microsoft/microsoft-graph-types';\nimport { isGraphError } from './isGraphError';\n\n/**\n * async promise, returns IDynamicPerson\n *\n * @param {string} userId\n * @returns {(Promise<IDynamicPerson>)}\n * @memberof Graph\n */\nexport const getUserWithPhoto = async (\n  graph: IGraph,\n  userId?: string,\n  requestedProps?: string[]\n): Promise<IDynamicPerson> => {\n  let photo: string;\n  let user: IDynamicPerson = null;\n\n  let cachedPhoto: CachePhoto;\n  let cachedUser: CacheUser;\n\n  const resource = userId ? `users/${userId}` : 'me';\n  const fullResource = resource + (requestedProps ? `?$select=${requestedProps.toString()}` : '');\n\n  const scopes = userId ? ['user.readbasic.all'] : ['user.read'];\n\n  // attempt to get user and photo from cache if enabled\n  if (getIsUsersCacheEnabled()) {\n    const cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n    cachedUser = await cache.getValue(userId || 'me');\n    if (cachedUser && getUserInvalidationTime() > Date.now() - cachedUser.timeCached) {\n      user = cachedUser.user ? (JSON.parse(cachedUser.user) as IDynamicPerson) : null;\n      if (user !== null && requestedProps) {\n        const uniqueProps = requestedProps.filter(prop => !Object.keys(user).includes(prop));\n        if (uniqueProps.length >= 1) {\n          user = null;\n          cachedUser = null;\n        }\n      }\n    } else {\n      cachedUser = null;\n    }\n  }\n  if (getIsPhotosCacheEnabled()) {\n    cachedPhoto = await getPhotoFromCache(userId || 'me', schemas.photos.stores.users);\n    if (cachedPhoto && getPhotoInvalidationTime() > Date.now() - cachedPhoto.timeCached) {\n      photo = cachedPhoto.photo;\n    } else if (cachedPhoto) {\n      try {\n        const response: Photo = (await graph.api(`${resource}/photo`).get()) as Photo;\n        if (response?.['@odata.mediaEtag'] && response['@odata.mediaEtag'] === cachedPhoto.eTag) {\n          // put current image into the cache to update the timestamp since etag is the same\n          await storePhotoInCache(userId || 'me', schemas.photos.stores.users, cachedPhoto);\n          photo = cachedPhoto.photo;\n        } else {\n          cachedPhoto = null;\n        }\n      } catch (e: unknown) {\n        if (isGraphError(e)) {\n          // if 404 received (photo not found) but user already in cache, update timeCache value to prevent repeated 404 error / graph calls on each page refresh\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          if (e.code === 'ErrorItemNotFound' || e.code === 'ImageNotFound') {\n            await storePhotoInCache(userId || 'me', schemas.photos.stores.users, { eTag: null, photo: null });\n          }\n        }\n      }\n    }\n  }\n\n  // if both are not in the cache, batch get them\n  if (!cachedPhoto && !cachedUser) {\n    let eTag: string;\n\n    // batch calls\n    const batch = graph.createBatch();\n    if (userId) {\n      batch.get('user', `/users/${userId}${requestedProps ? '?$select=' + requestedProps.toString() : ''}`, [\n        'user.readbasic.all'\n      ]);\n      batch.get('photo', `users/${userId}/photo/$value`, ['user.readbasic.all']);\n    } else {\n      batch.get('user', 'me', ['user.read']);\n      batch.get('photo', 'me/photo/$value', ['user.read']);\n    }\n    const response = await batch.executeAll();\n\n    const photoResponse = response.get('photo');\n    if (photoResponse) {\n      // eslint-disable-next-line @typescript-eslint/dot-notation\n      eTag = photoResponse.headers['ETag'];\n      photo = photoResponse.content as string;\n    }\n\n    const userResponse = response.get('user');\n    if (userResponse) {\n      user = userResponse.content as IDynamicPerson;\n    }\n\n    // store user & photo in their respective cache\n    if (getIsUsersCacheEnabled()) {\n      const cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n      await cache.putValue(userId || 'me', { user: JSON.stringify(user) });\n    }\n    if (getIsPhotosCacheEnabled()) {\n      await storePhotoInCache(userId || 'me', schemas.photos.stores.users, { eTag, photo });\n    }\n  } else if (!cachedPhoto) {\n    try {\n      // if only photo or user is not cached, get it individually\n      const response = await getPhotoForResource(graph, resource, scopes);\n      if (response) {\n        if (getIsPhotosCacheEnabled()) {\n          await storePhotoInCache(userId || 'me', schemas.photos.stores.users, {\n            eTag: response.eTag,\n            photo: response.photo\n          });\n        }\n        photo = response.photo;\n      }\n    } catch (_) {\n      // intentionally left empty...\n    }\n  } else if (!cachedUser) {\n    // get user from graph\n    try {\n      const response: IDynamicPerson = (await graph\n        .api(fullResource)\n        .middlewareOptions(prepScopes(...scopes))\n        .get()) as IDynamicPerson;\n\n      if (response) {\n        if (getIsUsersCacheEnabled()) {\n          const cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n          await cache.putValue(userId || 'me', { user: JSON.stringify(response) });\n        }\n        user = response;\n      }\n    } catch (_) {\n      // intentionally left empty...\n    }\n  }\n\n  if (user) {\n    user.personImage = photo;\n  }\n  return user;\n};\n"]}