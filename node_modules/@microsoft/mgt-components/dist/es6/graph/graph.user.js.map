{"version":3,"file":"graph.user.js","sourceRoot":"src/","sources":["graph/graph.user.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { CacheItem, CacheService, CacheStore, CollectionResponse, IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { User } from '@microsoft/microsoft-graph-types';\n\nimport { GraphRequest } from '@microsoft/microsoft-graph-client';\nimport { schemas } from './cacheStores';\nimport { findPeople, PersonType } from './graph.people';\nimport { IDynamicPerson } from './types';\n\n/**\n * Object to be stored in cache\n */\nexport interface CacheUser extends CacheItem {\n  /**\n   * stringified json representing a user\n   */\n  user?: string;\n}\n\n/**\n * Object to be stored in cache\n */\nexport interface CacheUserQuery extends CacheItem {\n  /**\n   * max number of results the query asks for\n   */\n  maxResults?: number;\n  /**\n   * list of users returned by query\n   */\n  results?: string[];\n}\n\n/**\n * Defines the time it takes for objects in the cache to expire\n */\nexport const getUserInvalidationTime = (): number =>\n  CacheService.config.users.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether or not the cache is enabled\n */\nexport const getIsUsersCacheEnabled = (): boolean =>\n  CacheService.config.users.isEnabled && CacheService.config.isEnabled;\n\nexport const getUsers = async (graph: IGraph, userFilters = '', top = 10): Promise<User[]> => {\n  const apiString = '/users';\n  let cache: CacheStore<CacheUserQuery>;\n  const cacheKey = `${userFilters === '' ? '*' : userFilters}:${top}`;\n  const cacheItem = { maxResults: top, results: null };\n\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUserQuery>(schemas.users, schemas.users.stores.userFilters);\n    const cacheRes = await cache.getValue(cacheKey);\n    if (cacheRes && getUserInvalidationTime() > Date.now() - cacheRes.timeCached) {\n      return cacheRes.results.map(userStr => JSON.parse(userStr) as User);\n    }\n  }\n  const graphClient: GraphRequest = graph.api(apiString).top(top);\n\n  if (userFilters) {\n    graphClient.filter(userFilters);\n  }\n\n  try {\n    const response = (await graphClient.middlewareOptions(prepScopes('user.read')).get()) as CollectionResponse<User>;\n    if (getIsUsersCacheEnabled() && response) {\n      cacheItem.results = response.value.map(userStr => JSON.stringify(userStr));\n      await cache.putValue(userFilters, cacheItem);\n    }\n    return response.value;\n    // eslint-disable-next-line no-empty\n  } catch (error) {}\n};\n\n/**\n * async promise, returns Graph User data relating to the user logged in\n *\n * @returns {(Promise<User>)}\n * @memberof Graph\n */\nexport const getMe = async (graph: IGraph, requestedProps?: string[]): Promise<User> => {\n  let cache: CacheStore<CacheUser>;\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n    const me = await cache.getValue('me');\n\n    if (me && getUserInvalidationTime() > Date.now() - me.timeCached) {\n      const cachedData = JSON.parse(me.user) as User;\n      const uniqueProps = requestedProps\n        ? requestedProps.filter(prop => !Object.keys(cachedData).includes(prop))\n        : null;\n\n      // if requestedProps doesn't contain any unique props other than \"@odata.context\"\n      if (!uniqueProps || uniqueProps.length <= 1) {\n        return cachedData;\n      }\n    }\n  }\n\n  let apiString = 'me';\n  if (requestedProps) {\n    apiString = apiString + '?$select=' + requestedProps.toString();\n  }\n  const response = (await graph.api(apiString).middlewareOptions(prepScopes('user.read')).get()) as User;\n  if (getIsUsersCacheEnabled()) {\n    await cache.putValue('me', { user: JSON.stringify(response) });\n  }\n  return response;\n};\n\n/**\n * async promise, returns all Graph users associated with the userPrincipleName provided\n *\n * @param {string} userPrincipleName\n * @returns {(Promise<User>)}\n * @memberof Graph\n */\nexport const getUser = async (graph: IGraph, userPrincipleName: string, requestedProps?: string[]): Promise<User> => {\n  const scopes = 'user.readbasic.all';\n  let cache: CacheStore<CacheUser>;\n\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n    // check cache\n    const user = await cache.getValue(userPrincipleName);\n\n    // is it stored and is timestamp good?\n    if (user && getUserInvalidationTime() > Date.now() - user.timeCached) {\n      const cachedData = user.user ? (JSON.parse(user.user) as User) : null;\n      const uniqueProps =\n        requestedProps && cachedData ? requestedProps.filter(prop => !Object.keys(cachedData).includes(prop)) : null;\n\n      // return without any worries\n      if (!uniqueProps || uniqueProps.length <= 1) {\n        return cachedData;\n      }\n    }\n  }\n\n  let apiString = `/users/${userPrincipleName}`;\n  if (requestedProps) {\n    apiString = apiString + '?$select=' + requestedProps.toString();\n  }\n\n  // else we must grab it\n  let response: User;\n  try {\n    response = (await graph.api(apiString).middlewareOptions(prepScopes(scopes)).get()) as User;\n    // eslint-disable-next-line no-empty\n  } catch (_) {}\n\n  if (getIsUsersCacheEnabled()) {\n    await cache.putValue(userPrincipleName, { user: JSON.stringify(response) });\n  }\n  return response;\n};\n\n/**\n * Returns a Promise of Graph Users array associated with the user ids array\n *\n * @export\n * @param {IGraph} graph\n * @param {string[]} userIds, an array of string ids\n * @returns {Promise<User[]>}\n */\nexport const getUsersForUserIds = async (\n  graph: IGraph,\n  userIds: string[],\n  searchInput = '',\n  userFilters = '',\n  fallbackDetails?: IDynamicPerson[]\n): Promise<User[]> => {\n  if (!userIds || userIds.length === 0) {\n    return [];\n  }\n  const batch = graph.createBatch<User>();\n  const peopleDict: Record<string, User | Promise<User>> = {};\n  const peopleSearchMatches = {};\n  const notInCache = [];\n  searchInput = searchInput.toLowerCase();\n  let cache: CacheStore<CacheUser>;\n\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUser>(schemas.users, schemas.users.stores.users);\n  }\n\n  for (const id of userIds) {\n    peopleDict[id] = null;\n    let apiUrl = `/users/${id}`;\n    let user: User;\n    let cacheUser: CacheUser;\n    if (getIsUsersCacheEnabled()) {\n      cacheUser = await cache.getValue(id);\n    }\n    if (cacheUser?.user && getUserInvalidationTime() > Date.now() - cacheUser.timeCached) {\n      user = JSON.parse(cacheUser?.user) as User;\n\n      if (searchInput) {\n        if (user) {\n          const displayName = user.displayName;\n          const searchMatches = displayName?.toLowerCase().includes(searchInput);\n          if (searchMatches) {\n            peopleSearchMatches[id] = user;\n          }\n        }\n      } else {\n        if (user) {\n          peopleDict[id] = user;\n        } else {\n          batch.get(id, apiUrl, ['user.readbasic.all']);\n          notInCache.push(id);\n        }\n      }\n    } else if (id !== '') {\n      if (id.toString() === 'me') {\n        peopleDict[id] = await getMe(graph);\n      } else {\n        apiUrl = `/users/${id}`;\n        if (userFilters) {\n          apiUrl += `${apiUrl}?$filter=${userFilters}`;\n        }\n        batch.get(id, apiUrl, ['user.readbasic.all']);\n        notInCache.push(id);\n      }\n    }\n  }\n  try {\n    if (batch.hasRequests) {\n      const responses = await batch.executeAll();\n      // iterate over userIds to ensure the order of ids\n      for (const id of userIds) {\n        const response = responses.get(id);\n        if (response?.content) {\n          const user = response.content;\n          if (searchInput) {\n            const displayName = user?.displayName.toLowerCase() || '';\n            if (displayName.includes(searchInput)) {\n              peopleSearchMatches[id] = user;\n            }\n          } else {\n            peopleDict[id] = user;\n          }\n\n          if (getIsUsersCacheEnabled()) {\n            await cache.putValue(id, { user: JSON.stringify(user) });\n          }\n        } else {\n          const fallback = fallbackDetails.find(detail => Object.values(detail).includes(id));\n          if (fallback) {\n            peopleDict[id] = fallback as User;\n          }\n        }\n      }\n    }\n    if (searchInput && Object.keys(peopleSearchMatches).length) {\n      return Promise.all(Object.values(peopleSearchMatches));\n    }\n    return Promise.all(Object.values(peopleDict));\n  } catch (_) {\n    // fallback to making the request one by one\n    try {\n      // call getUser for all the users that weren't cached\n      userIds\n        .filter(id => notInCache.includes(id))\n        .forEach(id => {\n          peopleDict[id] = getUser(graph, id);\n        });\n      if (getIsUsersCacheEnabled()) {\n        // store all users that weren't retrieved from the cache, into the cache\n        await Promise.all(\n          userIds\n            .filter(id => notInCache.includes(id))\n            .map(async id => await cache.putValue(id, { user: JSON.stringify(await peopleDict[id]) }))\n        );\n      }\n      return Promise.all(Object.values(peopleDict));\n    } catch (e) {\n      return [];\n    }\n  }\n};\n\n/**\n * Returns a Promise of Graph Users array associated with the people queries array\n *\n * @export\n * @param {IGraph} graph\n * @param {string[]} peopleQueries, an array of string ids\n * @returns {Promise<User[]>}\n */\nexport const getUsersForPeopleQueries = async (\n  graph: IGraph,\n  peopleQueries: string[],\n  fallbackDetails?: IDynamicPerson[]\n): Promise<User[]> => {\n  if (!peopleQueries || peopleQueries.length === 0) {\n    return [];\n  }\n\n  const batch = graph.createBatch<CollectionResponse<User>>();\n  const people: User[] = [];\n  let cacheRes: CacheUserQuery;\n  let cache: CacheStore<CacheUserQuery>;\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUserQuery>(schemas.users, schemas.users.stores.usersQuery);\n  }\n\n  for (const personQuery of peopleQueries) {\n    if (getIsUsersCacheEnabled()) {\n      cacheRes = await cache.getValue(personQuery);\n    }\n\n    if (\n      getIsUsersCacheEnabled() &&\n      cacheRes?.results[0] &&\n      getUserInvalidationTime() > Date.now() - cacheRes.timeCached\n    ) {\n      const person = JSON.parse(cacheRes.results[0]) as User;\n      people.push(person);\n    } else {\n      batch.get(personQuery, `/me/people?$search=\"${personQuery}\"`, ['people.read'], {\n        'X-PeopleQuery-QuerySources': 'Mailbox,Directory'\n      });\n    }\n  }\n\n  if (batch.hasRequests) {\n    try {\n      const responses = await batch.executeAll();\n\n      for (const personQuery of peopleQueries) {\n        const response = responses.get(personQuery);\n        if (response?.content?.value && response.content.value.length > 0) {\n          people.push(response.content.value[0]);\n          if (getIsUsersCacheEnabled()) {\n            await cache.putValue(personQuery, { maxResults: 1, results: [JSON.stringify(response.content.value[0])] });\n          }\n        } else {\n          const fallback = fallbackDetails.find(detail => Object.values(detail).includes(personQuery));\n          if (fallback) {\n            people.push(fallback as User);\n          }\n        }\n      }\n\n      return people;\n    } catch (_) {\n      try {\n        return Promise.all(\n          peopleQueries\n            .filter(personQuery => personQuery && personQuery !== '')\n            .map(async personQuery => {\n              const personArray = await findPeople(graph, personQuery, 1);\n              if (personArray?.length) {\n                if (getIsUsersCacheEnabled()) {\n                  await cache.putValue(personQuery, { maxResults: 1, results: [JSON.stringify(personArray[0])] });\n                }\n                return personArray[0];\n              }\n            })\n        );\n      } catch (e) {\n        return [];\n      }\n    }\n  }\n  return people;\n};\n\n/**\n * Search Microsoft Graph for Users in the organization\n *\n * @export\n * @param {IGraph} graph\n * @param {string} query - the string to search for\n * @param {number} [top=10] - maximum number of results to return\n * @returns {Promise<User[]>}\n */\nexport const findUsers = async (graph: IGraph, query: string, top = 10, userFilters = ''): Promise<User[]> => {\n  const scopes = 'User.ReadBasic.All';\n  const item = { maxResults: top, results: null };\n  const cacheKey = `${query}:${top}:${userFilters}`;\n  let cache: CacheStore<CacheUserQuery>;\n\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUserQuery>(schemas.users, schemas.users.stores.usersQuery);\n    const result: CacheUserQuery = await cache.getValue(cacheKey);\n\n    if (result && getUserInvalidationTime() > Date.now() - result.timeCached) {\n      return result.results.map(userStr => JSON.parse(userStr) as User);\n    }\n  }\n\n  const encodedQuery = `${query.replace(/#/g, '%2523')}`;\n  const graphBuilder = graph\n    .api('users')\n    .header('ConsistencyLevel', 'eventual')\n    .count(true)\n    .search(`\"displayName:${encodedQuery}\" OR \"mail:${encodedQuery}\"`);\n  let graphResult: CollectionResponse<User>;\n\n  if (userFilters !== '') {\n    graphBuilder.filter(userFilters);\n  }\n  try {\n    graphResult = (await graphBuilder.top(top).middlewareOptions(prepScopes(scopes)).get()) as CollectionResponse<User>;\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  if (getIsUsersCacheEnabled() && graphResult) {\n    item.results = graphResult.value.map(userStr => JSON.stringify(userStr));\n    await cache.putValue(query, item);\n  }\n  return graphResult ? graphResult.value : null;\n};\n\n/**\n * async promise, returns all matching Graph users who are member of the specified group\n *\n * @param {string} query\n * @param {string} groupId - the group to query\n * @param {number} [top=10] - number of people to return\n * @param {PersonType} [personType=PersonType.person] - the type of person to search for\n * @param {boolean} [transitive=false] - whether the return should contain a flat list of all nested members\n * @returns {(Promise<User[]>)}\n */\nexport const findGroupMembers = async (\n  graph: IGraph,\n  query: string,\n  groupId: string,\n  top = 10,\n  personType: PersonType = PersonType.person,\n  transitive = false,\n  userFilters = '',\n  peopleFilters = ''\n): Promise<User[]> => {\n  const scopes = ['GroupMember.Read.All'];\n  const item = { maxResults: top, results: null };\n\n  let cache: CacheStore<CacheUserQuery>;\n  const key = `${groupId || '*'}:${query || '*'}:${top}:${personType}:${transitive}:${userFilters}`;\n\n  if (getIsUsersCacheEnabled()) {\n    cache = CacheService.getCache<CacheUserQuery>(schemas.users, schemas.users.stores.usersQuery);\n    const result: CacheUserQuery = await cache.getValue(key);\n\n    if (result && getUserInvalidationTime() > Date.now() - result.timeCached) {\n      return result.results.map(userStr => JSON.parse(userStr) as User);\n    }\n  }\n\n  let filter = '';\n  if (query) {\n    filter = `startswith(displayName,'${query}') or startswith(givenName,'${query}') or startswith(surname,'${query}') or startswith(mail,'${query}') or startswith(userPrincipalName,'${query}')`;\n  }\n\n  let apiUrl = `/groups/${groupId}/${transitive ? 'transitiveMembers' : 'members'}`;\n  if (personType === PersonType.person) {\n    apiUrl += '/microsoft.graph.user';\n  } else if (personType === PersonType.group) {\n    apiUrl += '/microsoft.graph.group';\n    if (query) {\n      filter = `startswith(displayName,'${query}') or startswith(mail,'${query}')`;\n    }\n  }\n\n  if (userFilters) {\n    filter += query ? ` and ${userFilters}` : userFilters;\n  }\n\n  if (peopleFilters) {\n    filter += query ? ` and ${peopleFilters}` : peopleFilters;\n  }\n\n  const graphResult = (await graph\n    .api(apiUrl)\n    .count(true)\n    .top(top)\n    .filter(filter)\n    .header('ConsistencyLevel', 'eventual')\n    .middlewareOptions(prepScopes(...scopes))\n    .get()) as CollectionResponse<User>;\n\n  if (getIsUsersCacheEnabled() && graphResult) {\n    item.results = graphResult.value.map(userStr => JSON.stringify(userStr));\n    await cache.putValue(key, item);\n  }\n\n  return graphResult ? graphResult.value : null;\n};\n\nexport const findUsersFromGroupIds = async (\n  graph: IGraph,\n  query: string,\n  groupIds: string[],\n  top = 10,\n  personType: PersonType = PersonType.person,\n  transitive = false,\n  groupFilters = ''\n): Promise<User[]> => {\n  const users: User[] = [];\n  for (const groupId of groupIds) {\n    try {\n      const groupUsers = await findGroupMembers(graph, query, groupId, top, personType, transitive, groupFilters);\n      users.push(...groupUsers);\n    } catch (_) {\n      continue;\n    }\n  }\n  return users;\n};\n"]}