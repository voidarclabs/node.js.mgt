{"version":3,"file":"graph.people.js","sourceRoot":"src/","sources":["graph/graph.people.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, prepScopes, CacheItem, CacheService, CacheStore, CacheSchema } from '@microsoft/mgt-element';\nimport { Contact, Person, User } from '@microsoft/microsoft-graph-types';\nimport { CollectionResponse } from '@microsoft/mgt-element';\nimport { extractEmailAddress } from '../utils/Utils';\nimport { schemas } from './cacheStores';\nimport { IDynamicPerson } from './types';\n\n/**\n * Person Type enum\n *\n * @export\n * @enum {number}\n */\nexport enum PersonType {\n  /**\n   * Any type\n   */\n  any = 0,\n\n  /**\n   * A Person such as User or Contact\n   */\n  person = 'person',\n\n  /**\n   * A group\n   */\n  group = 'group'\n}\n\n/**\n * User Type enum\n *\n * @export\n * @enum {number}\n */\nexport enum UserType {\n  /**\n   * Any user or contact\n   */\n  any = 'any',\n\n  /**\n   * An organization User\n   */\n  user = 'user',\n\n  /**\n   * An implicit or personal contact\n   */\n  contact = 'contact'\n}\n\n/**\n * Object to be stored in cache representing individual people\n */\ninterface CachePerson extends CacheItem {\n  /**\n   * json representing a person stored as string\n   */\n  person?: string;\n}\n\n/**\n * Stores results of queries (multiple people returned)\n */\ninterface CachePeopleQuery extends CacheItem {\n  /**\n   * max number of results the query asks for\n   */\n  maxResults?: number;\n  /**\n   * list of people returned by query (might be less than max results!)\n   */\n  results?: string[];\n}\n\n/**\n * Defines the expiration time\n */\nconst getPeopleInvalidationTime = (): number => {\n  return CacheService.config.people.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n};\n\n/**\n * Whether the people store is enabled\n */\nconst getIsPeopleCacheEnabled = (): boolean => CacheService.config.people.isEnabled && CacheService.config.isEnabled;\n\n/**\n * async promise, returns all Graph people who are most relevant contacts to the signed in user.\n *\n * @param {string} query\n * @param {number} [top=10] - number of people to return\n * @param {PersonType} [personType=PersonType.person] - the type of person to search for\n * @returns {(Promise<Person[]>)}\n */\nexport const findPeople = async (\n  graph: IGraph,\n  query: string,\n  top = 10,\n  userType: UserType = UserType.any,\n  filters = ''\n): Promise<Person[]> => {\n  const scopes = 'people.read';\n\n  const cacheKey = `${query}:${top}:${userType}`;\n  let cache: CacheStore<CachePeopleQuery>;\n  if (getIsPeopleCacheEnabled()) {\n    const people: CacheSchema = schemas.people;\n    const peopleQuery: string = schemas.people.stores.peopleQuery;\n    cache = CacheService.getCache<CachePeopleQuery>(people, peopleQuery);\n    const result: CachePeopleQuery = getIsPeopleCacheEnabled() ? await cache.getValue(cacheKey) : null;\n    if (result && getPeopleInvalidationTime() > Date.now() - result.timeCached) {\n      return result.results.map(peopleStr => JSON.parse(peopleStr) as Person);\n    }\n  }\n\n  let filter = \"personType/class eq 'Person'\";\n\n  if (userType !== UserType.any) {\n    if (userType === UserType.user) {\n      filter += \"and personType/subclass eq 'OrganizationUser'\";\n    } else {\n      filter += \"and (personType/subclass eq 'ImplicitContact' or personType/subclass eq 'PersonalContact')\";\n    }\n  }\n\n  if (filters !== '') {\n    // Adding the default people filters to the search filters\n    filter += `${filter} and ${filters}`;\n  }\n  let graphResult: CollectionResponse<Person>;\n  try {\n    let graphRequest = graph\n      .api('/me/people')\n      .search('\"' + query + '\"')\n      .top(top)\n      .filter(filter)\n      .middlewareOptions(prepScopes(scopes));\n\n    if (userType !== UserType.contact) {\n      // for any type other than Contact, user a wider search\n      graphRequest = graphRequest.header('X-PeopleQuery-QuerySources', 'Mailbox,Directory');\n    }\n\n    graphResult = (await graphRequest.get()) as CollectionResponse<Person>;\n\n    if (getIsPeopleCacheEnabled() && graphResult) {\n      const item: CachePeopleQuery = { maxResults: top, results: null };\n      item.results = graphResult.value.map(personStr => JSON.stringify(personStr));\n      await cache.putValue(cacheKey, item);\n    }\n  } catch (error) {\n    // intentionally empty\n  }\n  return graphResult?.value;\n};\n\n/**\n * async promise to the Graph for People, by default, it will request the most frequent contacts for the signed in user.\n *\n * @returns {(Promise<Person[]>)}\n * @memberof Graph\n */\nexport const getPeople = async (\n  graph: IGraph,\n  userType: UserType = UserType.any,\n  peopleFilters = '',\n  top = 10\n): Promise<Person[]> => {\n  const scopes = 'people.read';\n\n  let cache: CacheStore<CachePeopleQuery>;\n  const cacheKey = `${peopleFilters ? peopleFilters : `*:${userType}`}:${top}`;\n\n  if (getIsPeopleCacheEnabled()) {\n    cache = CacheService.getCache<CachePeopleQuery>(schemas.people, schemas.people.stores.peopleQuery);\n    const cacheRes = await cache.getValue(cacheKey);\n\n    if (cacheRes && getPeopleInvalidationTime() > Date.now() - cacheRes.timeCached) {\n      return cacheRes.results.map(ppl => JSON.parse(ppl) as Person);\n    }\n  }\n\n  const uri = '/me/people';\n  let filter = \"personType/class eq 'Person'\";\n  if (userType !== UserType.any) {\n    if (userType === UserType.user) {\n      filter += \"and personType/subclass eq 'OrganizationUser'\";\n    } else {\n      filter += \"and (personType/subclass eq 'ImplicitContact' or personType/subclass eq 'PersonalContact')\";\n    }\n  }\n\n  if (peopleFilters) {\n    filter += ` and ${peopleFilters}`;\n  }\n\n  let people: CollectionResponse<Person>;\n  try {\n    let graphRequest = graph.api(uri).middlewareOptions(prepScopes(scopes)).top(top).filter(filter);\n\n    if (userType !== UserType.contact) {\n      // for any type other than Contact, user a wider search\n      graphRequest = graphRequest.header('X-PeopleQuery-QuerySources', 'Mailbox,Directory');\n    }\n\n    people = (await graphRequest.get()) as CollectionResponse<Person>;\n    if (getIsPeopleCacheEnabled() && people) {\n      await cache.putValue(cacheKey, { maxResults: 10, results: people.value.map(ppl => JSON.stringify(ppl)) });\n    }\n  } catch (_) {\n    // no-op\n  }\n  return people ? people.value : null;\n};\n\n/**\n * Attempts to extract the email from the IDynamicPerson properties.\n *\n * @param {IDynamicperson} entity\n */\nexport const getEmailFromGraphEntity = (entity: IDynamicPerson): string => {\n  const person = entity as Person;\n  const user = entity as User;\n  const contact = entity as Contact;\n\n  if (user.mail) {\n    return extractEmailAddress(user.mail);\n  } else if (person.scoredEmailAddresses?.length) {\n    return extractEmailAddress(person.scoredEmailAddresses[0].address);\n  } else if (contact.emailAddresses?.length) {\n    return extractEmailAddress(contact.emailAddresses[0].address);\n  }\n  return null;\n};\n\n/**\n * async promise, returns a Graph contact associated with the email provided\n *\n * @param {string} email\n * @returns {(Promise<Contact[]>)}\n * @memberof Graph\n */\nexport const findContactsByEmail = async (graph: IGraph, email: string): Promise<Contact[]> => {\n  const scopes = 'contacts.read';\n  let cache: CacheStore<CachePerson>;\n  if (getIsPeopleCacheEnabled()) {\n    cache = CacheService.getCache<CachePerson>(schemas.people, schemas.people.stores.contacts);\n    const contact = await cache.getValue(email);\n\n    if (contact && getPeopleInvalidationTime() > Date.now() - contact.timeCached) {\n      return JSON.parse(contact.person) as Contact[];\n    }\n  }\n\n  const encodedEmail = `${email.replace(/#/g, '%2523')}`;\n\n  const result = (await graph\n    .api('/me/contacts')\n    .filter(`emailAddresses/any(a:a/address eq '${encodedEmail}')`)\n    .middlewareOptions(prepScopes(scopes))\n    .get()) as CollectionResponse<Contact>;\n\n  if (getIsPeopleCacheEnabled() && result) {\n    await cache.putValue(email, { person: JSON.stringify(result.value) });\n  }\n\n  return result ? result.value : null;\n};\n\n/**\n * async promise, returns Graph people matching the Graph query specified\n * in the resource param\n *\n * @param {string} resource\n * @returns {(Promise<Person[]>)}\n * @memberof Graph\n */\nexport const getPeopleFromResource = async (\n  graph: IGraph,\n  version: string,\n  resource: string,\n  scopes: string[]\n): Promise<Person[]> => {\n  let cache: CacheStore<CachePeopleQuery>;\n  const key = `${version}${resource}`;\n  if (getIsPeopleCacheEnabled()) {\n    cache = CacheService.getCache<CachePeopleQuery>(schemas.people, schemas.people.stores.peopleQuery);\n    const result: CachePeopleQuery = await cache.getValue(key);\n    if (result && getPeopleInvalidationTime() > Date.now() - result.timeCached) {\n      return result.results.map(peopleStr => JSON.parse(peopleStr) as Person);\n    }\n  }\n\n  let request = graph.api(resource).version(version);\n\n  if (scopes?.length) {\n    request = request.middlewareOptions(prepScopes(...scopes));\n  }\n\n  let response = (await request.get()) as CollectionResponse<Person>;\n  // get more pages if there are available\n  if (response && Array.isArray(response.value) && response['@odata.nextLink']) {\n    let page = response;\n\n    while (page?.['@odata.nextLink']) {\n      const nextLink = page['@odata.nextLink'] as string;\n      const nextResource = nextLink.split(version)[1];\n      page = (await graph.client.api(nextResource).version(version).get()) as CollectionResponse<Person>;\n      if (page?.value?.length) {\n        page.value = response.value.concat(page.value);\n        response = page;\n      }\n    }\n  }\n\n  if (getIsPeopleCacheEnabled() && response) {\n    const item = { results: null };\n    if (Array.isArray(response.value)) {\n      item.results = response.value.map(personStr => JSON.stringify(personStr));\n    } else {\n      item.results = [JSON.stringify(response)];\n    }\n    await cache.putValue(key, item);\n  }\n\n  return response?.value;\n};\n"]}