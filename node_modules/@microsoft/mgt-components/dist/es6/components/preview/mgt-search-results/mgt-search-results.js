/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { html, nothing } from 'lit';
import { property, state } from 'lit/decorators.js';
import { CacheService, equals, MgtTemplatedComponent, prepScopes, Providers, ProviderState, customElement, mgtHtml, BetaGraph } from '@microsoft/mgt-element';
import { schemas } from '../../../graph/cacheStores';
import { strings } from './strings';
import { styles } from './mgt-search-results-css';
import { getIsResponseCacheEnabled, getNameFromUrl, getRelativeDisplayDate, getResponseInvalidationTime, sanitizeSummary, trimFileExtension } from '../../../utils/Utils';
import { getSvg, SvgIcon } from '../../../utils/SvgHelper';
import { fluentSkeleton, fluentButton, fluentTooltip, fluentDivider } from '@fluentui/web-components';
import { registerFluentComponents } from '../../../utils/FluentComponents';
registerFluentComponents(fluentSkeleton, fluentButton, fluentTooltip, fluentDivider);
/**
 * **Preview component** Custom element for making Microsoft Graph get queries.
 * Component may change before general availability release.
 *
 * @fires {CustomEvent<DataChangedDetail>} dataChange - Fired when data changes
 *
 * @cssprop --answer-border-radius - {Length} Border radius of an answer
 * @cssprop --answer-box-shadow - {Length} Box shadow of an answer
 * @cssprop --answer-border - {Length} Border of an answer
 * @cssprop --answer-padding - {Length} Padding of an answer
 *
 * @class mgt-search-results
 * @extends {MgtTemplatedComponent}
 */
let MgtSearchResults = class MgtSearchResults extends MgtTemplatedComponent {
    /**
     * Array of styles to apply to the element. The styles should be defined
     * user the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    /**
     * Gets all the localization strings for the component
     */
    get strings() {
        return strings;
    }
    /**
     * The query to send to Microsoft Search
     *
     * @type {string}
     * @memberof MgtSearchResults
     */
    get queryString() {
        return this._queryString;
    }
    set queryString(value) {
        if (this._queryString !== value) {
            this._queryString = value;
            this._currentPage = 1;
            this.setLoadingState(true);
            void this.requestStateUpdate(true);
        }
    }
    /**
     * Specifies the offset for the search results.
     * Offset 0 returns the very first result.
     *
     * @type {number}
     * @memberof MgtSearchResults
     */
    get from() {
        return (this.currentPage - 1) * this.size;
    }
    /**
     * The size of the page to be retrieved.
     * The maximum value is 1000.
     *
     * @type {number}
     * @memberof MgtSearchResults
     */
    get size() {
        return this._size;
    }
    set size(value) {
        if (value > this.maxPageSize) {
            this._size = this.maxPageSize;
        }
        else {
            this._size = value;
        }
    }
    get searchEndpoint() {
        return '/search/query';
    }
    get maxPageSize() {
        return 1000;
    }
    get currentPage() {
        return this._currentPage;
    }
    set currentPage(value) {
        if (this._currentPage !== value) {
            this._currentPage = value;
            void this.requestStateUpdate(true);
        }
    }
    constructor() {
        super();
        /**
         * Default page size is 10
         */
        this._size = 10;
        /**
         * One or more types of resources expected in the response.
         * Possible values are: list, site, listItem, message, event,
         * drive, driveItem, externalItem.
         *
         * @type {string[]}
         * @memberof MgtSearchResults
         */
        this.entityTypes = ['driveItem', 'listItem', 'site'];
        /**
         * The scopes to request
         *
         * @type {string[]}
         * @memberof MgtSearchResults
         */
        this.scopes = [];
        /**
         * Content sources to use with External Items
         *
         * @type {string[]}
         * @memberof MgtSearchResults
         */
        this.contentSources = [];
        /**
         * Api version to use for request
         *
         * @type {string}
         * @memberof MgtSearchResults
         */
        this.version = 'v1.0';
        /**
         * The maximum number of pages to be clickable
         * in the paging control
         *
         * @type {number}
         * @memberof MgtSearchResults
         */
        this.pagingMax = 7;
        /**
         * This triggers hybrid sort for messages : the first 3 messages are the most relevant.
         * This property is only applicable to entityType=message
         *
         * @type {boolean}
         * @memberof MgtSearchResults
         */
        this.enableTopResults = false;
        /**
         * Enables cache on the response from the specified resource
         * default = false
         *
         * @type {boolean}
         * @memberof MgtSearchResults
         */
        this.cacheEnabled = false;
        /**
         * Invalidation period of the cache for the responses in milliseconds
         *
         * @type {number}
         * @memberof MgtSearchResults
         */
        this.cacheInvalidationPeriod = 30000;
        this.isRefreshing = false;
        this.defaultFields = [
            'webUrl',
            'lastModifiedBy',
            'lastModifiedDateTime',
            'summary',
            'displayName',
            'name'
        ];
        this._currentPage = 1;
        /**
         * Triggers a first page click
         *
         */
        this.onFirstPageClick = () => {
            this.currentPage = 1;
            this.scrollToFirstResult();
        };
        /**
         * Triggers a previous page click
         */
        this.onPageBackClick = () => {
            this.currentPage--;
            this.scrollToFirstResult();
        };
        /**
         * Triggers a next page click
         */
        this.onPageNextClick = () => {
            this.currentPage++;
            this.scrollToFirstResult();
        };
        console.warn('ðŸ¦’: <mgt-search-results> is a preview component and may change prior to becoming generally available. See more information https://aka.ms/mgt/preview-components');
    }
    /**
     * Synchronizes property values when attributes change.
     *
     * @param {string} name
     * @param {string} oldValue
     * @param {string} newValue
     * @memberof MgtSearchResults
     */
    attributeChangedCallback(name, oldValue, newValue) {
        super.attributeChangedCallback(name, oldValue, newValue);
        void this.requestStateUpdate();
    }
    /**
     * Refresh the data
     *
     * @param {boolean} [hardRefresh=false]
     * if false (default), the component will only update if the data changed
     * if true, the data will be first cleared and reloaded completely
     * @memberof MgtSearchResults
     */
    refresh(hardRefresh = false) {
        this.isRefreshing = true;
        if (hardRefresh) {
            this.clearState();
        }
        void this.requestStateUpdate(hardRefresh);
    }
    /**
     * Clears state of the component
     *
     * @protected
     * @memberof MgtSearchResults
     */
    clearState() {
        this.response = null;
    }
    /**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     */
    render() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        let renderedTemplate = null;
        let headerTemplate = null;
        let footerTemplate = null;
        if (this.hasTemplate('header')) {
            headerTemplate = this.renderTemplate('header', this.response);
        }
        footerTemplate = this.renderFooter((_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.value[0]) === null || _b === void 0 ? void 0 : _b.hitsContainers[0]);
        if (this.isLoadingState) {
            renderedTemplate = this.renderLoading();
        }
        else if (this.error) {
            renderedTemplate = this.renderError();
        }
        else if (this.response && this.hasTemplate('default')) {
            renderedTemplate = this.renderTemplate('default', this.response) || html ``;
        }
        else if ((_d = (_c = this.response) === null || _c === void 0 ? void 0 : _c.value[0]) === null || _d === void 0 ? void 0 : _d.hitsContainers[0]) {
            renderedTemplate = html `${(_h = (_g = (_f = (_e = this.response) === null || _e === void 0 ? void 0 : _e.value[0]) === null || _f === void 0 ? void 0 : _f.hitsContainers[0]) === null || _g === void 0 ? void 0 : _g.hits) === null || _h === void 0 ? void 0 : _h.map(result => this.renderResult(result))}`;
        }
        else if (this.hasTemplate('no-data')) {
            renderedTemplate = this.renderTemplate('no-data', null);
        }
        else {
            renderedTemplate = html ``;
        }
        return html `
      ${headerTemplate}
      <div class="search-results">
        ${renderedTemplate}
      </div>
      ${footerTemplate}`;
    }
    /**
     * load state into the component.
     *
     * @protected
     * @returns
     * @memberof MgtSearchResults
     */
    loadState() {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            const provider = Providers.globalProvider;
            this.error = null;
            if (!provider || provider.state !== ProviderState.SignedIn) {
                return;
            }
            if (this.queryString) {
                try {
                    const requestOptions = this.getRequestOptions();
                    let cache;
                    const key = JSON.stringify({
                        endpoint: `${this.version}${this.searchEndpoint}`,
                        requestOptions
                    });
                    let response = null;
                    if (this.shouldRetrieveCache()) {
                        cache = CacheService.getCache(schemas.search, schemas.search.stores.responses);
                        const result = getIsResponseCacheEnabled() ? yield cache.getValue(key) : null;
                        if (result && getResponseInvalidationTime(this.cacheInvalidationPeriod) > Date.now() - result.timeCached) {
                            response = JSON.parse(result.response);
                        }
                    }
                    if (!response) {
                        const graph = provider.graph.forComponent(this);
                        let request = graph.api(this.searchEndpoint).version(this.version);
                        if ((_a = this.scopes) === null || _a === void 0 ? void 0 : _a.length) {
                            request = request.middlewareOptions(prepScopes(...this.scopes));
                        }
                        response = (yield request.post({ requests: [requestOptions] }));
                        if (this.fetchThumbnail) {
                            const thumbnailBatch = graph.createBatch();
                            const thumbnailBatchBeta = BetaGraph.fromGraph(graph).createBatch();
                            const hits = ((_b = response.value) === null || _b === void 0 ? void 0 : _b.length) && ((_c = response.value[0].hitsContainers) === null || _c === void 0 ? void 0 : _c.length)
                                ? (_e = (_d = response.value[0].hitsContainers[0]) === null || _d === void 0 ? void 0 : _d.hits) !== null && _e !== void 0 ? _e : []
                                : [];
                            for (const element of hits) {
                                const resource = element.resource;
                                if ((resource.size > 0 || ((_f = resource.webUrl) === null || _f === void 0 ? void 0 : _f.endsWith('.aspx'))) &&
                                    (resource['@odata.type'] === '#microsoft.graph.driveItem' ||
                                        resource['@odata.type'] === '#microsoft.graph.listItem')) {
                                    if (resource['@odata.type'] === '#microsoft.graph.listItem') {
                                        thumbnailBatchBeta.get(element.hitId.toString(), `/sites/${resource.parentReference.siteId}/pages/${resource.id}`);
                                    }
                                    else {
                                        thumbnailBatch.get(element.hitId.toString(), `/drives/${resource.parentReference.driveId}/items/${resource.id}/thumbnails/0/medium`);
                                    }
                                }
                            }
                            /**
                             * Based on the batch response, augment the search result resource with the thumbnail url
                             *
                             * @param thumbnailResponse
                             */
                            const augmentResponse = (thumbnailResponse) => {
                                if (thumbnailResponse && thumbnailResponse.size > 0) {
                                    for (const [k, value] of thumbnailResponse) {
                                        const result = response.value[0].hitsContainers[0].hits[k];
                                        const thumbnail = result.resource['@odata.type'] === '#microsoft.graph.listItem'
                                            ? { url: value.content.thumbnailWebUrl }
                                            : { url: value.content.url };
                                        result.resource.thumbnail = thumbnail;
                                    }
                                }
                            };
                            try {
                                augmentResponse(yield thumbnailBatch.executeAll());
                                augmentResponse(yield thumbnailBatchBeta.executeAll());
                            }
                            catch (_g) {
                                // no-op
                            }
                        }
                        if (this.shouldUpdateCache() && response) {
                            cache = CacheService.getCache(schemas.search, schemas.search.stores.responses);
                            yield cache.putValue(key, { response: JSON.stringify(response) });
                        }
                    }
                    if (!equals(this.response, response)) {
                        this.response = response;
                    }
                }
                catch (e) {
                    this.error = e;
                }
                if (this.response) {
                    this.error = null;
                }
            }
            else {
                this.response = null;
            }
            this.isRefreshing = false;
            this.fireCustomEvent('dataChange', { response: this.response, error: this.error });
        });
    }
    /**
     * Render the loading state.
     *
     * @protected
     * @returns
     * @memberof MgtSearchResults
     */
    renderLoading() {
        return (this.renderTemplate('loading', null) ||
            // creates an array of n items where n is the current max number of results, this builds a shimmer for that many results
            html `
        ${[...Array(this.size)].map(() => {
                return html `
            <div class="search-result">
              <div class="search-result-grid">
                <div class="search-result-icon">
                  <fluent-skeleton class="search-result-icon__shimmer" shape="rect" shimmer></fluent-skeleton>
                </div>
                <div class="searc-result-content">
                  <div class="search-result-name">
                    <fluent-skeleton class="search-result-name__shimmer" shape="rect" shimmer></fluent-skeleton>
                  </div>
                  <div class="search-result-info">
                    <div class="search-result-author">
                      <fluent-skeleton class="search-result-author__shimmer" shape="circle" shimmer></fluent-skeleton>
                    </div>
                    <div class="search-result-date">
                      <fluent-skeleton class="search-result-date__shimmer" shape="rect" shimmer></fluent-skeleton>
                    </div>
                  </div>
                  <fluent-skeleton class="search-result-content__shimmer" shape="rect" shimmer></fluent-skeleton>
                  <fluent-skeleton class="search-result-content__shimmer" shape="rect" shimmer></fluent-skeleton>
                </div>
                ${this.fetchThumbnail &&
                    html `
                    <div class="search-result-thumbnail">
                      <fluent-skeleton class="search-result-thumbnail__shimmer" shape="rect" shimmer></fluent-skeleton>
                    </div>
                  `}
              </div>
              <fluent-divider></fluent-divider>
            </div>
          `;
            })}
       `);
    }
    /**
     * Render the result item.
     *
     * @protected
     * @returns
     * @memberof MgtSearchResults
     */
    renderResult(result) {
        const type = this.getResourceType(result.resource);
        if (this.hasTemplate(`result-${type}`)) {
            return this.renderTemplate(`result-${type}`, result, result.hitId);
        }
        else {
            switch (result.resource['@odata.type']) {
                case '#microsoft.graph.driveItem':
                    return this.renderDriveItem(result);
                case '#microsoft.graph.site':
                    return this.renderSite(result);
                case '#microsoft.graph.person':
                    return this.renderPerson(result);
                case '#microsoft.graph.drive':
                case '#microsoft.graph.list':
                    return this.renderList(result);
                case '#microsoft.graph.listItem':
                    return this.renderListItem(result);
                case '#microsoft.graph.search.bookmark':
                    return this.renderBookmark(result);
                case '#microsoft.graph.search.acronym':
                    return this.renderAcronym(result);
                case '#microsoft.graph.search.qna':
                    return this.renderQnA(result);
                default:
                    return this.renderDefault(result);
            }
        }
    }
    /**
     * Renders the footer with pages if required
     *
     * @param hitsContainer Search results
     */
    renderFooter(hitsContainer) {
        if (this.pagingRequired(hitsContainer)) {
            const pages = this.getActivePages(hitsContainer.total);
            return html `
        <div class="search-results-pages">
          ${this.renderPreviousPage()}
          ${this.renderFirstPage(pages)}
          ${this.renderAllPages(pages)}
          ${this.renderNextPage()}
        </div>
      `;
        }
    }
    /**
     * Validates if paging is required based on the provided results
     *
     * @param hitsContainer
     */
    pagingRequired(hitsContainer) {
        return (hitsContainer === null || hitsContainer === void 0 ? void 0 : hitsContainer.moreResultsAvailable) || this.currentPage * this.size < (hitsContainer === null || hitsContainer === void 0 ? void 0 : hitsContainer.total);
    }
    /**
     * Gets a list of active pages to render for paging purposes
     *
     * @param totalResults Total number of results of the search query
     */
    getActivePages(totalResults) {
        const getFirstPage = () => {
            const medianPage = this.currentPage - Math.floor(this.pagingMax / 2) - 1;
            if (medianPage >= Math.floor(this.pagingMax / 2)) {
                return medianPage;
            }
            else {
                return 0;
            }
        };
        const pages = [];
        const firstPage = getFirstPage();
        if (firstPage + 1 > this.pagingMax - this.currentPage || this.pagingMax === this.currentPage) {
            for (let i = firstPage + 1; i < Math.ceil(totalResults / this.size) &&
                i < this.pagingMax + (this.currentPage - 1) &&
                pages.length < this.pagingMax - 2; ++i) {
                pages.push(i + 1);
            }
        }
        else {
            for (let i = firstPage; i < this.pagingMax; ++i) {
                pages.push(i + 1);
            }
        }
        return pages;
    }
    /**
     * Renders all sequential pages buttons
     *
     * @param pages
     */
    renderAllPages(pages) {
        return html `
      ${pages.map(page => html `
            <fluent-button
              title="${strings.page} ${page}"
              appearance="stealth"
              class="${page === this.currentPage ? 'search-results-page-active' : 'search-results-page'}"
              @click="${() => this.onPageClick(page)}">
                ${page}
            </fluent-button>`)}`;
    }
    /**
     * Renders the "First page" button
     *
     * @param pages
     */
    renderFirstPage(pages) {
        return html `
      ${pages.some(page => page === 1)
            ? nothing
            : html `
              <fluent-button
                 title="${strings.page} 1"
                 appearance="stealth"
                 class="search-results-page"
                 @click="${this.onFirstPageClick}">
                 1
               </fluent-button>`
                ? html `
              <fluent-button
                id="page-back-dot"
                appearance="stealth"
                class="search-results-page"
                title="${this.getDotButtonTitle()}"
                @click="${() => this.onPageClick(this.currentPage - Math.ceil(this.pagingMax / 2))}"
              >
                ...
              </fluent-button>`
                : nothing}`;
    }
    /**
     * Constructs the "dot dot dot" button title
     */
    getDotButtonTitle() {
        return `${strings.back} ${Math.ceil(this.pagingMax / 2)} ${strings.pages}`;
    }
    /**
     * Renders the "Previous page" button
     */
    renderPreviousPage() {
        return this.currentPage > 1
            ? html `
          <fluent-button
            appearance="stealth"
            class="search-results-page"
            title="${strings.back}"
            @click="${this.onPageBackClick}">
              ${getSvg(SvgIcon.ChevronLeft)}
            </fluent-button>`
            : nothing;
    }
    /**
     * Renders the "Next page" button
     */
    renderNextPage() {
        return !this.isLastPage()
            ? html `
          <fluent-button
            appearance="stealth"
            class="search-results-page"
            title="${strings.next}"
            aria-label="${strings.next}"
            @click="${this.onPageNextClick}">
              ${getSvg(SvgIcon.ChevronRight)}
            </fluent-button>`
            : nothing;
    }
    /**
     * Triggers a specific page click
     *
     * @param pageNumber
     */
    onPageClick(pageNumber) {
        this.currentPage = pageNumber;
        this.scrollToFirstResult();
    }
    /**
     * Validates if the current page is the last page of the collection
     */
    isLastPage() {
        return this.currentPage === Math.ceil(this.response.value[0].hitsContainers[0].total / this.size);
    }
    /**
     * Scroll to the top of the search results
     */
    scrollToFirstResult() {
        const target = this.renderRoot.querySelector('.search-results');
        target.scrollIntoView({
            block: 'start',
            behavior: 'smooth'
        });
    }
    /**
     * Gets the resource type (entity) of a search result
     *
     * @param resource
     */
    getResourceType(resource) {
        return resource['@odata.type'].split('.').pop();
    }
    /**
     * Renders a driveItem entity
     *
     * @param result
     */
    renderDriveItem(result) {
        var _a, _b;
        const resource = result.resource;
        return mgtHtml `
      <div class="search-result-grid">
        <div class="search-result-icon">
          <mgt-file
            .fileDetails="${result.resource}"
            view="image"
            class="file-icon">
          </mgt-file>
        </div>
        <div class="search-result-content">
          <div class="search-result-name">
            <a href="${resource.webUrl}?Web=1" target="_blank">${trimFileExtension(resource.name)}</a>
          </div>
          <div class="search-result-info">
            <div class="search-result-author">
              <mgt-person
                person-query=${resource.lastModifiedBy.user.email}
                view="oneLine"
                person-card="hover"
                show-presence="true">
              </mgt-person>
            </div>
            <div class="search-result-date">
              &nbsp; ${strings.modified} ${getRelativeDisplayDate(new Date(resource.lastModifiedDateTime))}
            </div>
          </div>
          <div class="search-result-summary" .innerHTML="${sanitizeSummary(result.summary)}"></div>
        </div>
        ${((_a = resource.thumbnail) === null || _a === void 0 ? void 0 : _a.url) &&
            html `
          <div class="search-result-thumbnail">
            <a href="${resource.webUrl}" target="_blank"><img alt="${resource.name}" src="${(_b = resource.thumbnail) === null || _b === void 0 ? void 0 : _b.url}" /></a>
          </div>`}

      </div>
      <fluent-divider></fluent-divider>
    `;
    }
    /**
     * Renders a site entity
     *
     * @param result
     * @returns
     */
    renderSite(result) {
        const resource = result.resource;
        return html `
      <div class="search-result-grid">
        <div class="search-result-icon">
          ${this.getResourceIcon(resource)}
        </div>
        <div class="searc-result-content">
          <div class="search-result-name">
            <a href="${resource.webUrl}" target="_blank">${resource.displayName}</a>
          </div>
          <div class="search-result-info">
            <div class="search-result-url">
              <a href="${resource.webUrl}" target="_blank">${resource.webUrl}</a>
            </div>
          </div>
          <div class="search-result-summary" .innerHTML="${sanitizeSummary(result.summary)}"></div>
        </div>
      </div>
      <fluent-divider></fluent-divider>
    `;
    }
    /**
     * Renders a list entity
     *
     * @param result
     * @returns
     */
    renderList(result) {
        const resource = result.resource;
        return mgtHtml `
      <div class="search-result-grid">
        <div class="search-result-icon">
          <mgt-file
            .fileDetails="${result.resource}"
            view="image">
          </mgt-file>
        </div>
        <div class="search-result-content">
          <div class="search-result-name">
            <a href="${resource.webUrl}?Web=1" target="_blank">
              ${trimFileExtension(resource.name || getNameFromUrl(resource.webUrl))}
            </a>
          </div>
          <div class="search-result-summary" .innerHTML="${sanitizeSummary(result.summary)}"></div>
        </div>
      </div>
      <fluent-divider></fluent-divider>
    `;
    }
    /**
     * Renders a listItem entity
     *
     * @param result
     * @returns
     */
    renderListItem(result) {
        var _a, _b;
        const resource = result.resource;
        return mgtHtml `
      <div class="search-result-grid">
        <div class="search-result-icon">
          ${resource.webUrl.endsWith('.aspx') ? getSvg(SvgIcon.News) : getSvg(SvgIcon.FileOuter)}
        </div>
        <div class="search-result-content">
          <div class="search-result-name">
            <a href="${resource.webUrl}?Web=1" target="_blank">
              ${trimFileExtension(resource.name || getNameFromUrl(resource.webUrl))}
            </a>
          </div>
          <div class="search-result-info">
            <div class="search-result-author">
              <mgt-person
                person-query=${resource.lastModifiedBy.user.email}
                view="oneLine"
                person-card="hover"
                show-presence="true">
              </mgt-person>
            </div>
            <div class="search-result-date">
              &nbsp; ${strings.modified} ${getRelativeDisplayDate(new Date(resource.lastModifiedDateTime))}
            </div>
          </div>
          <div class="search-result-summary" .innerHTML="${sanitizeSummary(result.summary)}"></div>
        </div>
        ${((_a = resource.thumbnail) === null || _a === void 0 ? void 0 : _a.url) &&
            html `
          <div class="search-result-thumbnail">
            <a href="${resource.webUrl}" target="_blank"><img alt="${trimFileExtension(resource.name || getNameFromUrl(resource.webUrl))}" src="${((_b = resource.thumbnail) === null || _b === void 0 ? void 0 : _b.url) || nothing}" /></a>
          </div>`}
      </div>
      <fluent-divider></fluent-divider>
    `;
    }
    /**
     * Renders a person entity
     *
     * @param result
     * @returns
     */
    renderPerson(result) {
        const resource = result.resource;
        return mgtHtml `
      <div class="search-result">
        <mgt-person
          view="fourLines"
          person-query=${resource.userPrincipalName}
          person-card="hover"
          show-presence="true">
        </mgt-person>
      </div>
      <fluent-divider></fluent-divider>
    `;
    }
    /**
     * Renders a bookmark entity
     *
     * @param result
     */
    renderBookmark(result) {
        return this.renderAnswer(result, SvgIcon.DoubleBookmark);
    }
    /**
     * Renders an acronym entity
     *
     * @param result
     */
    renderAcronym(result) {
        return this.renderAnswer(result, SvgIcon.BookOpen);
    }
    /**
     * Renders a qna entity
     *
     * @param result
     */
    renderQnA(result) {
        return this.renderAnswer(result, SvgIcon.BookQuestion);
    }
    /**
     * Renders an answer entity
     *
     * @param result
     */
    renderAnswer(result, icon) {
        const resource = result.resource;
        return html `
      <div class="search-result-grid search-result-answer">
        <div class="search-result-icon">
          ${getSvg(icon)}
        </div>
        <div class="search-result-content">
          <div class="search-result-name">
            <a href="${this.getResourceUrl(resource)}?Web=1" target="_blank">${resource.displayName}</a>
          </div>
          <div class="search-result-summary">${resource.description}</div>
        </div>
      </div>
      <fluent-divider></fluent-divider>
    `;
    }
    /**
     * Renders any entity
     *
     * @param result
     */
    renderDefault(result) {
        const resource = result.resource;
        const resourceUrl = this.getResourceUrl(resource);
        return html `
      <div class="search-result-grid">
        <div class="search-result-icon">
          ${this.getResourceIcon(resource)}
        </div>
        <div class="search-result-content">
          <div class="search-result-name">
            ${resourceUrl
            ? html `
                  <a href="${resourceUrl}?Web=1" target="_blank">${this.getResourceName(resource)}</a>
                `
            : html `
                  ${this.getResourceName(resource)}
                `}
          </div>
          <div class="search-result-summary" .innerHTML="${this.getResultSummary(result)}"></div>
        </div>
      </div>
      <fluent-divider></fluent-divider>
    `;
    }
    /**
     * Gets default resource URLs
     *
     * @param resource
     */
    getResourceUrl(resource) {
        return resource.webUrl || /* resource.url ||*/ resource.webLink || null;
    }
    /**
     * Gets default resource Names
     *
     * @param resource
     */
    getResourceName(resource) {
        return resource.displayName || resource.subject || trimFileExtension(resource.name);
    }
    /**
     * Gets default result summary
     *
     * @param resource
     */
    getResultSummary(result) {
        var _a;
        return sanitizeSummary(result.summary || ((_a = result.resource) === null || _a === void 0 ? void 0 : _a.description) || null);
    }
    /**
     * Gets default resource icon
     *
     * @param resource
     */
    getResourceIcon(resource) {
        switch (resource['@odata.type']) {
            case '#microsoft.graph.site':
                return getSvg(SvgIcon.Globe);
            case '#microsoft.graph.message':
                return getSvg(SvgIcon.Email);
            case '#microsoft.graph.event':
                return getSvg(SvgIcon.Event);
            case 'microsoft.graph.chatMessage':
                return getSvg(SvgIcon.SmallChat);
            default:
                return getSvg(SvgIcon.FileOuter);
        }
    }
    /**
     * Validates if cache should be retrieved
     *
     * @returns
     */
    shouldRetrieveCache() {
        return getIsResponseCacheEnabled() && this.cacheEnabled && !this.isRefreshing;
    }
    /**
     * Validates if cache should be updated
     *
     * @returns
     */
    shouldUpdateCache() {
        return getIsResponseCacheEnabled() && this.cacheEnabled;
    }
    /**
     * Builds the appropriate RequestOption for the search query
     *
     * @returns
     */
    getRequestOptions() {
        const requestOptions = {
            entityTypes: this.entityTypes,
            query: {
                queryString: this.queryString
            },
            from: this.from ? this.from : undefined,
            size: this.size ? this.size : undefined,
            fields: this.getFields(),
            enableTopResults: this.enableTopResults ? this.enableTopResults : undefined
        };
        if (this.entityTypes.includes('externalItem')) {
            requestOptions.contentSources = this.contentSources;
        }
        if (this.version === 'beta') {
            requestOptions.query.queryTemplate = this.queryTemplate ? this.queryTemplate : undefined;
        }
        return requestOptions;
    }
    /**
     * Gets the fields and default fields for default render methods
     *
     * @returns
     */
    getFields() {
        if (this.fields) {
            return this.defaultFields.concat(this.fields);
        }
        return undefined;
    }
};
__decorate([
    property({
        attribute: 'query-string',
        type: String
    }),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], MgtSearchResults.prototype, "queryString", null);
__decorate([
    property({
        attribute: 'query-template',
        type: String
    }),
    __metadata("design:type", String)
], MgtSearchResults.prototype, "queryTemplate", void 0);
__decorate([
    property({
        attribute: 'entity-types',
        converter: value => {
            return value.split(',').map(v => v.trim());
        },
        type: String
    }),
    __metadata("design:type", Array)
], MgtSearchResults.prototype, "entityTypes", void 0);
__decorate([
    property({
        attribute: 'scopes',
        converter: (value, _type) => {
            return value ? value.toLowerCase().split(',') : null;
        }
    }),
    __metadata("design:type", Array)
], MgtSearchResults.prototype, "scopes", void 0);
__decorate([
    property({
        attribute: 'content-sources',
        converter: (value, _type) => {
            return value ? value.toLowerCase().split(',') : null;
        }
    }),
    __metadata("design:type", Array)
], MgtSearchResults.prototype, "contentSources", void 0);
__decorate([
    property({
        attribute: 'version',
        reflect: true,
        type: String
    }),
    __metadata("design:type", Object)
], MgtSearchResults.prototype, "version", void 0);
__decorate([
    property({
        attribute: 'size',
        reflect: true,
        type: Number
    }),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Object])
], MgtSearchResults.prototype, "size", null);
__decorate([
    property({
        attribute: 'paging-max',
        reflect: true,
        type: Number
    }),
    __metadata("design:type", Object)
], MgtSearchResults.prototype, "pagingMax", void 0);
__decorate([
    property({
        attribute: 'fetch-thumbnail',
        type: Boolean
    }),
    __metadata("design:type", Boolean)
], MgtSearchResults.prototype, "fetchThumbnail", void 0);
__decorate([
    property({
        attribute: 'fields',
        converter: value => {
            return value.split(',').map(v => v.trim());
        },
        type: String
    }),
    __metadata("design:type", Array)
], MgtSearchResults.prototype, "fields", void 0);
__decorate([
    property({
        attribute: 'enable-top-results',
        reflect: true,
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtSearchResults.prototype, "enableTopResults", void 0);
__decorate([
    property({
        attribute: 'cache-enabled',
        reflect: true,
        type: Boolean
    }),
    __metadata("design:type", Object)
], MgtSearchResults.prototype, "cacheEnabled", void 0);
__decorate([
    property({
        attribute: 'cache-invalidation-period',
        reflect: true,
        type: Number
    }),
    __metadata("design:type", Object)
], MgtSearchResults.prototype, "cacheInvalidationPeriod", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], MgtSearchResults.prototype, "response", void 0);
__decorate([
    state(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], MgtSearchResults.prototype, "currentPage", null);
MgtSearchResults = __decorate([
    customElement('search-results'),
    __metadata("design:paramtypes", [])
], MgtSearchResults);
export { MgtSearchResults };
//# sourceMappingURL=mgt-search-results.js.map