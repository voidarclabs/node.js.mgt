/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { MgtBaseComponent, customElement } from '@microsoft/mgt-element';
import { styles } from './mgt-arrow-options-css';
import { registerFluentComponents } from '../../../utils/FluentComponents';
import { fluentMenu, fluentMenuItem, fluentButton } from '@fluentui/web-components';
registerFluentComponents(fluentMenu, fluentMenuItem, fluentButton);
/*
  Ok, the name here deserves a bit of explanation,
  This component originally had a built-in arrow icon,
  The problem came when you wanted to use a different symbol,
  So the arrow was removed, but the name was already set everywhere.
  - benotter
 */
/**
 * Custom Component used to handle an arrow rendering for TaskGroups utilized in the task component.
 *
 * @cssprop --arrow-options-left {Length} The distance of the dropdown menu from the left in absolute position. Default is 0.
 * @cssprop --arrow-options-button-background-color {Color} The background color of the arrow options button.
 * @cssprop --arrow-options-button-font-size {Length} The font size of the button text. Default is large.
 * @cssprop --arrow-options-button-font-weight {Length} The font weight of the button text. Default is 600.
 * @cssprop --arrow-options-button-font-color {Color} The font color of the text in the button.
 *
 * @export MgtArrowOptions
 * @class MgtArrowOptions
 * @extends {MgtBaseComponent}
 */
let MgtArrowOptions = class MgtArrowOptions extends MgtBaseComponent {
    /**
     * Array of styles to apply to the element. The styles should be defined
     * user the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    constructor() {
        super();
        /**
         * Handles clicking for header menu, utilizing boolean switch open
         *
         * @param {MouseEvent} e attaches to Header to open menu
         * @memberof MgtArrowOptions
         */
        this.onHeaderClick = (e) => {
            const keys = Object.keys(this.options);
            if (keys.length > 1) {
                e.preventDefault();
                e.stopPropagation();
                this.open = !this.open;
            }
        };
        /**
         * Handles key down presses done on the header element.
         *
         * @param {KeyboardEvent} e
         */
        this.onHeaderKeyDown = (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                e.stopPropagation();
                this.open = !this.open;
                // Manually adding the 'open' class to display the menu because
                // by the time I set the first element's focus, the classes are not
                // updated and that has no effect. You can't set focus on elements
                // that have no display.
                const fluentMenuEl = this.renderRoot.querySelector('fluent-menu');
                if (fluentMenuEl) {
                    fluentMenuEl.classList.remove('closed');
                    fluentMenuEl.classList.add('open');
                }
                const header = e.target;
                if (header) {
                    const firstMenuItem = this.renderRoot.querySelector("fluent-menu-item[tabindex='0']");
                    if (firstMenuItem) {
                        header.blur();
                        firstMenuItem.focus();
                    }
                }
            }
        };
        this.value = '';
        this.options = {};
        this._clickHandler = () => (this.open = false);
        window.addEventListener('onblur', () => (this.open = false));
    }
    connectedCallback() {
        super.connectedCallback();
        window.addEventListener('click', this._clickHandler);
    }
    disconnectedCallback() {
        window.removeEventListener('click', this._clickHandler);
        super.disconnectedCallback();
    }
    /**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     */
    render() {
        return html `
      <fluent-button
        class="header"
        @click=${this.onHeaderClick}
        @keydown=${this.onHeaderKeyDown}
        appearance="lightweight">
          ${this.value}
      </fluent-button>
      <fluent-menu
        class=${classMap({ menu: true, open: this.open, closed: !this.open })}>
          ${this.getMenuOptions()}
      </fluent-menu>`;
    }
    getMenuOptions() {
        const keys = Object.keys(this.options);
        return keys.map((opt) => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            const clickFn = (e) => {
                this.open = false;
                this.options[opt](e);
            };
            const keyDownFn = (e) => {
                const header = this.renderRoot.querySelector('.header');
                if (e.key === 'Enter') {
                    this.open = false;
                    this.options[opt](e);
                    header.focus();
                }
                else if (e.key === 'Tab') {
                    this.open = false;
                }
                else if (e.key === 'Escape') {
                    this.open = false;
                    if (header) {
                        header.focus();
                    }
                }
            };
            return html `
          <fluent-menu-item
            @click=${clickFn}
            @keydown=${keyDownFn}>
              ${opt}
          </fluent-menu-item>`;
        });
    }
};
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Boolean)
], MgtArrowOptions.prototype, "open", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], MgtArrowOptions.prototype, "value", void 0);
__decorate([
    property({ type: Object }),
    __metadata("design:type", Object)
], MgtArrowOptions.prototype, "options", void 0);
MgtArrowOptions = __decorate([
    customElement('arrow-options'),
    __metadata("design:paramtypes", [])
], MgtArrowOptions);
export { MgtArrowOptions };
//# sourceMappingURL=mgt-arrow-options.js.map