/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { MgtTemplatedComponent, customElementHelper, mgtHtml } from '@microsoft/mgt-element';
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import './sub-components/mgt-spinner/mgt-spinner';
/**
 * A base class for building person card subsections.
 *
 * @export
 * @class BasePersonCardSection
 * @extends {MgtTemplatedComponent}
 */
export class BasePersonCardSection extends MgtTemplatedComponent {
    /**
     * Set the person details to render
     *
     * @type {IDynamicPerson}
     * @memberof BasePersonCardSection
     */
    get personDetails() {
        return this._personDetails;
    }
    set personDetails(value) {
        if (this._personDetails === value) {
            return;
        }
        this._personDetails = value;
        void this.requestStateUpdate();
    }
    /**
     * Determines the appropriate view state: full or compact
     *
     * @protected
     * @type {boolean}
     * @memberof BasePersonCardSection
     */
    get isCompact() {
        return this._isCompact;
    }
    constructor() {
        super();
        this._isCompact = false;
        this._personDetails = null;
    }
    /**
     * Set the section to compact view mode
     *
     * @returns
     * @memberof BasePersonCardSection
     */
    asCompactView() {
        this._isCompact = true;
        this.requestUpdate();
        return this;
    }
    /**
     * Set the section to full view mode
     *
     * @returns
     * @memberof BasePersonCardSection
     */
    asFullView() {
        this._isCompact = false;
        this.requestUpdate();
        return this;
    }
    /**
     * Reset any state in the section
     *
     * @protected
     * @abstract
     * @memberof BasePersonCardSection
     */
    clearState() {
        this._isCompact = false;
        this._personDetails = null;
    }
    /**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     */
    render() {
        return this.isCompact ? this.renderCompactView() : this.renderFullView();
    }
    /**
     * Render a spinner while the component loads state
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof BasePersonCardSection
     */
    renderLoading() {
        return mgtHtml `
      <div class="loading">
        <mgt-spinner></mgt-spinner>
      </div>
    `;
    }
    /**
     * Render the section in a empty data state
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtPersonCardContact
     */
    renderNoData() {
        return html `
      <div class="no-data">No data</div>
    `;
    }
    /**
     * Navigate the card to a different user.
     *
     * @protected
     * @memberof BasePersonCardSection
     */
    navigateCard(person) {
        var _a;
        // Search for card parent and update it's personDetails object
        let parent = this.parentNode;
        while (parent) {
            parent = parent.parentNode;
            const shadowRoot = parent;
            if (((_a = shadowRoot === null || shadowRoot === void 0 ? void 0 : shadowRoot.host) === null || _a === void 0 ? void 0 : _a.tagName) === `${customElementHelper.prefix}-PERSON-CARD`.toUpperCase()) {
                parent = shadowRoot.host;
                break;
            }
        }
        const personCard = parent;
        personCard.navigate(person);
    }
}
__decorate([
    property({
        attribute: 'person-details',
        type: Object
    }),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], BasePersonCardSection.prototype, "personDetails", null);
//# sourceMappingURL=BasePersonCardSection.js.map