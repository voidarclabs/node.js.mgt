{"version":3,"file":"mgt-taxonomy-picker.js","sourceRoot":"src/","sources":["components/mgt-taxonomy-picker/mgt-taxonomy-picker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport type * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { Position } from '../../graph/types';\nimport { html, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { MgtTemplatedComponent, mgtHtml, customElement } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { fluentCombobox, fluentOption } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport '../../styles/style-helper';\nimport { styles } from './mgt-taxonomy-picker-css';\nimport { DataChangedDetail } from '../mgt-get/mgt-get';\n\nregisterFluentComponents(fluentCombobox, fluentOption);\n\n/**\n * Web component that can query the Microsoft Graph API for Taxonomy\n * and render a dropdown control with terms,\n * allowing selection of a single term based on\n * the specified term set id or a combination of the specified term set id and the specified term id.\n * Uses mgt-get.\n *\n * @fires {CustomEvent<MicrosoftGraph.TermStore.Term>} selectionChanged - Fired when an option is clicked/selected\n * @export\n * @class MgtTaxonomyPicker\n * @extends {MgtTemplatedComponent}\n *\n * @cssprop --taxonomy-picker-background-color - {Color} Picker component background color\n * @cssprop --taxonomy-picker-list-max-height - {String} max height for options list. Default value is 380px.\n * @cssprop --taxonomy-picker-placeholder-color - {Color} Text color for the placeholder in the picker\n * @cssprop --taxonomy-picker-placeholder-hover-color - {Color} Text color for the placeholder in the picker on hover\n */\n@customElement('taxonomy-picker')\nexport class MgtTaxonomyPicker extends MgtTemplatedComponent {\n  /**\n   * The strings to be used for localizing the component.\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtTaxonomyPicker\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * The termsetId of the term set whose children to get.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'term-set-id',\n    type: String\n  })\n  public termsetId: string;\n\n  /**\n   * The termId of the term whose children to get. This term must be a child of the term set specified by termsetId.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'term-id',\n    type: String\n  })\n  public termId: string;\n\n  /**\n   * The id of the site where the termset is located. If not specified, the termset is assumed to be at the tenant level.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'site-id',\n    type: String\n  })\n  public siteId: string;\n\n  /**\n   * The locale based on which the term names should be returned.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'locale',\n    type: String\n  })\n  public locale: string;\n\n  /**\n   * Api version to use for request.\n   * Default is beta.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'beta';\n\n  /**\n   * A placeholder for the picker.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'placeholder',\n    type: String\n  })\n  public placeholder: string;\n\n  /**\n   * The position of the dropdown. Can be 'above' or 'below'.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'position',\n    type: String,\n    converter: (value: Position): Position => {\n      if (value === 'above') {\n        return 'above';\n      } else {\n        return 'below';\n      }\n    }\n  })\n  public position: Position = 'below';\n\n  /**\n   * The default selected term id.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'default-selected-term-id',\n    type: String\n  })\n  public get defaultSelectedTermId(): string {\n    return this._defaultSelectedTermId;\n  }\n  public set defaultSelectedTermId(value: string) {\n    if (value !== this._defaultSelectedTermId) {\n      this._defaultSelectedTermId = value;\n      void this.requestStateUpdate(true);\n    }\n  }\n\n  /**\n   * The selected term.\n   *\n   * @type {MicrosoftGraph.TermStore.Term}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'selected-term',\n    type: Object\n  })\n  public get selectedTerm(): MicrosoftGraph.TermStore.Term {\n    return this._selectedTerm;\n  }\n  public set selectedTerm(value: MicrosoftGraph.TermStore.Term) {\n    this._selectedTerm = value;\n  }\n\n  /**\n   * Determines whether component should be disabled or not\n   *\n   * @type {boolean}\n   * @memberof MgtPeoplePicker\n   */\n  @property({\n    attribute: 'disabled',\n    type: Boolean\n  })\n  public disabled: boolean;\n\n  /**\n   * Enables cache on the response from the specified resource.\n   * Default is false.\n   *\n   * @type {boolean}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'cache-enabled',\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds.\n   *\n   * @type {number}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    type: Number\n  })\n  public cacheInvalidationPeriod = 0;\n\n  private isRefreshing: boolean;\n  private _selectedTerm: MicrosoftGraph.TermStore.Term;\n  private _defaultSelectedTermId: string;\n\n  @state() private terms: MicrosoftGraph.TermStore.Term[];\n  @state() private noTerms: boolean;\n  // @state() private error: object;\n\n  constructor() {\n    super();\n    this.placeholder = this.strings.comboboxPlaceholder;\n    this.isRefreshing = false;\n    this.noTerms = false;\n  }\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtTaxonomyPicker\n   */\n  public refresh(hardRefresh = false) {\n    this.isRefreshing = true;\n    if (hardRefresh) {\n      this.clearState();\n    }\n    void this.requestStateUpdate(hardRefresh);\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtTaxonomyPicker\n   */\n  protected clearState(): void {\n    this.terms = null;\n    this.error = null;\n    this.noTerms = false;\n  }\n\n  /**\n   * Invoked on each update to perform rendering the picker. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  public render() {\n    // if loading state, render loading template\n    if (this.isLoadingState && !this.terms) {\n      return this.renderLoading();\n    }\n\n    // if error state, render error template\n    if (this.error) {\n      return this.renderError();\n    }\n\n    // if no terms are found, render no-data template\n    if (this.noTerms) {\n      return this.renderNoData();\n    }\n\n    // if terms are found, render picker else render get\n    return this.terms?.length > 0 ? this.renderTaxonomyPicker() : this.renderGet();\n  }\n\n  /**\n   * Renders loading spinner while terms are fetched from the Graph\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderLoading(): TemplateResult {\n    return (\n      this.renderTemplate('loading', null, 'loading') ||\n      mgtHtml`\n        <div class=\"message-parent\">\n          <mgt-spinner></mgt-spinner>\n          <div label=\"loading-text\" aria-label=\"loading\">\n            ${this.strings.loadingMessage}\n          </div>\n        </div>\n      `\n    );\n  }\n\n  /**\n   * Render the no-data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderError(): TemplateResult {\n    return (\n      this.renderTemplate('error', null, 'error') ||\n      html`\n              <span>\n                ${this.error}\n            </span>\n          `\n    );\n  }\n  /**\n   * Render the no-data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderNoData(): TemplateResult {\n    return (\n      this.renderTemplate('no-data', null) ||\n      html`\n            <span>\n              ${this.strings.noTermsFound}\n            </span>\n          `\n    );\n  }\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderTaxonomyPicker(): TemplateResult {\n    return mgtHtml`\n      <fluent-combobox class=\"taxonomy-picker\" autocomplete=\"both\" placeholder=${this.placeholder} position=${\n        this.position\n      } ?disabled=${this.disabled}>\n        ${this.terms.map(term => this.renderTaxonomyPickerItem(term))}\n      </fluent-combobox>\n     `;\n  }\n\n  /**\n   * Render picker item.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderTaxonomyPickerItem(term: MicrosoftGraph.TermStore.Term): TemplateResult {\n    const selected: boolean = this.defaultSelectedTermId && this.defaultSelectedTermId === term.id;\n\n    return html`\n        <fluent-option value=${term.id} ?selected=${selected} @click=${(e: MouseEvent) => this.handleClick(e, term)}> ${\n          this.renderTemplate('term', { term }, term.id) || term.labels[0].name\n        } </fluent-option>\n        `;\n  }\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderGet(): TemplateResult {\n    // if termsetId is not specified, return error message\n    if (!this.termsetId) {\n      return html`\n            <span>\n                ${this.strings.termsetIdRequired}\n            </span>\n            `;\n    }\n\n    let resource = `/termStore/sets/${this.termsetId}/children`;\n\n    // if both termsetId and termId are specified, then set resource to /termStore/sets/{termsetId}/terms/{termId}/children\n    if (this.termId) {\n      resource = `/termStore/sets/${this.termsetId}/terms/${this.termId}/children`;\n    }\n\n    // if siteId is specified, then prefix /sites/{siteId}/ to the resource\n    if (this.siteId) {\n      resource = `/sites/${this.siteId}${resource}`;\n    }\n\n    // Add properties to select to the resource\n    resource += '?$select=id,labels,descriptions,properties';\n\n    return mgtHtml`\n      <mgt-get\n        class=\"mgt-get\"\n        resource=${resource}\n        version=${this.version}\n        scopes=${['TermStore.Read.All']}\n        ?cache-enabled=${this.cacheEnabled}\n        ?cache-invalidation-period=${this.cacheInvalidationPeriod}>\n      </mgt-get>`;\n  }\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTaxonomyPicker\n   */\n  protected async loadState() {\n    if (!this.terms) {\n      const parent = this.renderRoot.querySelector('.mgt-get');\n      parent.addEventListener('dataChange', (e: CustomEvent<DataChangedDetail>): void => this.handleDataChange(e));\n    }\n    this.isRefreshing = false;\n    // hack to maintain method signature contract\n    await Promise.resolve();\n  }\n\n  private handleDataChange(e: CustomEvent<DataChangedDetail>): void {\n    const error = e.detail.error ? e.detail.error : null;\n\n    if (error) {\n      this.error = error;\n      return;\n    }\n\n    // if locale is specified, then convert it to lower case\n    if (this.locale) {\n      this.locale = this.locale.toLowerCase();\n    }\n\n    const response = e.detail.response.value;\n\n    // if response is not null and has values, if locale is specified, then\n    // get the label in response that has languageTag equal to locale and make it the first label and append the rest of the labels\n\n    const terms = response.map((item: MicrosoftGraph.TermStore.Term) => {\n      const labels = item.labels;\n      if (labels && labels.length > 0) {\n        if (this.locale) {\n          const label = labels.find(l => l.languageTag.toLowerCase() === this.locale);\n          if (label) {\n            item.labels = [label, ...labels.filter(l => l.languageTag.toLowerCase() !== this.locale)];\n          }\n        }\n      }\n      return item;\n    });\n\n    this.terms = terms;\n\n    //  if there are no terms then set noTerms to true\n    if (terms.length === 0) {\n      this.noTerms = true;\n    }\n  }\n\n  private handleClick(e: MouseEvent, item: MicrosoftGraph.TermStore.Term) {\n    this.selectedTerm = item;\n    this.fireCustomEvent('selectionChanged', item);\n  }\n}\n"]}