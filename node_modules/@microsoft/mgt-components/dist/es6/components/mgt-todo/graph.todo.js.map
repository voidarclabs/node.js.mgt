{"version":3,"file":"graph.todo.js","sourceRoot":"src/","sources":["components/mgt-todo/graph.todo.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { TodoTaskList, TodoTask } from '@microsoft/microsoft-graph-types';\nimport { IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { CollectionResponse } from '@microsoft/mgt-element';\n\nexport interface LinkedResource {\n  id: string;\n  webUrl: string;\n  applicationName: string;\n  displayName: string;\n  externalId: string;\n}\n\n/**\n * Get all todo tasks for a specific task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTask[]>}\n */\nexport const getTodoTasks = async (graph: IGraph, listId: string): Promise<TodoTask[]> => {\n  const tasks = (await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<TodoTask>;\n\n  return tasks?.value;\n};\n\n/**\n * Get a specific todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<TodoTask>}\n */\nexport const getTodoTask = async (graph: IGraph, listId: string, taskId: string): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as TodoTask;\n\n/**\n * get all todo task lists\n *\n * @export\n * @param {IGraph} graph\n * @returns {Promise<TodoTaskList[]>}\n */\nexport const getTodoTaskLists = async (graph: IGraph): Promise<TodoTaskList[]> => {\n  const taskLists = (await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<TodoTaskList>;\n\n  return taskLists?.value;\n};\n\n/**\n * Get a specific todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTaskList>}\n */\nexport const getTodoTaskList = async (graph: IGraph, listId: string): Promise<TodoTaskList> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as TodoTaskList;\n\n/**\n * Create a new todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {{ title: string; dueDateTime: { dateTime: string; timeZone: string } }} taskData\n * @returns {Promise<TodoTask>}\n */\nexport const createTodoTask = async (\n  graph: IGraph,\n  listId: string,\n  taskData: { title: string; dueDateTime?: { dateTime: string; timeZone: string } }\n): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(taskData)) as TodoTask;\n\n/**\n * Create a new todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {{ displayName: string }} list\n * @returns {Promise<TodoTaskList>}\n */\nexport const createTodoTaskList = async (graph: IGraph, listData: { displayName: string }): Promise<TodoTaskList> =>\n  (await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(listData)) as TodoTaskList;\n\n/**\n * Delete a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<void>}\n */\nexport const deleteTodoTask = async (graph: IGraph, listId: string, taskId: string): Promise<void> => {\n  await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n};\n\n/**\n * Delete a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<void>}\n */\nexport const deleteTodoTaskList = async (graph: IGraph, listId: string): Promise<void> => {\n  await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n};\n\n/**\n * Update a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @param {TodoTask} taskData\n * @returns {Promise<TodoTask>}\n */\nexport const updateTodoTask = async (\n  graph: IGraph,\n  listId: string,\n  taskId: string,\n  taskData: TodoTask\n): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskData)) as TodoTask;\n\n/**\n * Update a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {TodoTaskList} taskListData\n * @returns {Promise<TodoTaskList>}\n */\nexport const updateTodoTaskList = async (\n  graph: IGraph,\n  listId: string,\n  taskListData: TodoTaskList\n): Promise<TodoTaskList> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskListData)) as TodoTaskList;\n"]}