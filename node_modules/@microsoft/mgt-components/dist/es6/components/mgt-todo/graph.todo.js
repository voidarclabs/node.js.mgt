/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { prepScopes } from '@microsoft/mgt-element';
/**
 * Get all todo tasks for a specific task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @returns {Promise<TodoTask[]>}
 */
export const getTodoTasks = (graph, listId) => __awaiter(void 0, void 0, void 0, function* () {
    const tasks = (yield graph
        .api(`/me/todo/lists/${listId}/tasks`)
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.Read'))
        .get());
    return tasks === null || tasks === void 0 ? void 0 : tasks.value;
});
/**
 * Get a specific todo task.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {string} taskId
 * @returns {Promise<TodoTask>}
 */
export const getTodoTask = (graph, listId, taskId) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield graph
        .api(`/me/todo/lists/${listId}/tasks/${taskId}`)
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.Read'))
        .get());
});
/**
 * get all todo task lists
 *
 * @export
 * @param {IGraph} graph
 * @returns {Promise<TodoTaskList[]>}
 */
export const getTodoTaskLists = (graph) => __awaiter(void 0, void 0, void 0, function* () {
    const taskLists = (yield graph
        .api('/me/todo/lists')
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.Read'))
        .get());
    return taskLists === null || taskLists === void 0 ? void 0 : taskLists.value;
});
/**
 * Get a specific todo task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @returns {Promise<TodoTaskList>}
 */
export const getTodoTaskList = (graph, listId) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield graph
        .api(`/me/todo/lists/${listId}`)
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.Read'))
        .get());
});
/**
 * Create a new todo task.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {{ title: string; dueDateTime: { dateTime: string; timeZone: string } }} taskData
 * @returns {Promise<TodoTask>}
 */
export const createTodoTask = (graph, listId, taskData) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield graph
        .api(`/me/todo/lists/${listId}/tasks`)
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.ReadWrite'))
        .post(taskData));
});
/**
 * Create a new todo task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {{ displayName: string }} list
 * @returns {Promise<TodoTaskList>}
 */
export const createTodoTaskList = (graph, listData) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield graph
        .api('/me/todo/lists')
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.ReadWrite'))
        .post(listData));
});
/**
 * Delete a todo task.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {string} taskId
 * @returns {Promise<void>}
 */
export const deleteTodoTask = (graph, listId, taskId) => __awaiter(void 0, void 0, void 0, function* () {
    yield graph
        .api(`/me/todo/lists/${listId}/tasks/${taskId}`)
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.ReadWrite'))
        .delete();
});
/**
 * Delete a todo task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @returns {Promise<void>}
 */
export const deleteTodoTaskList = (graph, listId) => __awaiter(void 0, void 0, void 0, function* () {
    yield graph
        .api(`/me/todo/lists/${listId}`)
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.ReadWrite'))
        .delete();
});
/**
 * Update a todo task.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {string} taskId
 * @param {TodoTask} taskData
 * @returns {Promise<TodoTask>}
 */
export const updateTodoTask = (graph, listId, taskId, taskData) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield graph
        .api(`/me/todo/lists/${listId}/tasks/${taskId}`)
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.ReadWrite'))
        .patch(taskData));
});
/**
 * Update a todo task list.
 *
 * @export
 * @param {IGraph} graph
 * @param {string} listId
 * @param {TodoTaskList} taskListData
 * @returns {Promise<TodoTaskList>}
 */
export const updateTodoTaskList = (graph, listId, taskListData) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield graph
        .api(`/me/todo/lists/${listId}`)
        .header('Cache-Control', 'no-store')
        .middlewareOptions(prepScopes('Tasks.ReadWrite'))
        .patch(taskListData));
});
//# sourceMappingURL=graph.todo.js.map