/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { BasePersonCardSection } from '../BasePersonCardSection';
import { getSvg, SvgIcon } from '../../utils/SvgHelper';
import { getRelativeDisplayDate } from '../../utils/Utils';
import { styles } from './mgt-messages-css';
import { strings } from './strings';
import { customElement } from '@microsoft/mgt-element';
/**
 * The email messages subsection of the person card
 *
 * @export
 * @class MgtMessages
 * @extends {MgtTemplatedComponent}
 */
let MgtMessages = class MgtMessages extends BasePersonCardSection {
    /**
     * Array of styles to apply to the element. The styles should be defined
     * using the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    get strings() {
        return strings;
    }
    constructor(messages) {
        super();
        this._messages = messages;
    }
    /**
     * The name for display in the overview section.
     *
     * @readonly
     * @type {string}
     * @memberof MgtMessages
     */
    get displayName() {
        return this.strings.emailsSectionTitle;
    }
    /**
     * The title for display when rendered as a full card.
     *
     * @readonly
     * @type {string}
     * @memberof MgtOrganization
     */
    get cardTitle() {
        return this.strings.emailsSectionTitle;
    }
    /**
     * Reset any state in the section
     *
     * @protected
     * @memberof MgtMessages
     */
    clearState() {
        super.clearState();
        this._messages = [];
    }
    /**
     * Render the icon for display in the navigation ribbon.
     *
     * @returns {TemplateResult}
     * @memberof MgtMessages
     */
    renderIcon() {
        return getSvg(SvgIcon.Messages);
    }
    /**
     * Render the compact view
     *
     * @returns {TemplateResult}
     * @memberof MgtMessages
     */
    renderCompactView() {
        var _a;
        let contentTemplate;
        if (this.isLoadingState) {
            contentTemplate = this.renderLoading();
        }
        else if (!((_a = this._messages) === null || _a === void 0 ? void 0 : _a.length)) {
            contentTemplate = this.renderNoData();
        }
        else {
            const messageTemplates = this._messages
                ? this._messages.slice(0, 3).map(message => this.renderMessage(message))
                : [];
            contentTemplate = html `
         ${messageTemplates}
       `;
        }
        return html `
       <div class="root compact">
         ${contentTemplate}
       </div>
     `;
    }
    /**
     * Render the full view
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtMessages
     */
    renderFullView() {
        var _a;
        let contentTemplate;
        if (this.isLoadingState) {
            contentTemplate = this.renderLoading();
        }
        else if (!((_a = this._messages) === null || _a === void 0 ? void 0 : _a.length)) {
            contentTemplate = this.renderNoData();
        }
        else {
            contentTemplate = html `
         ${this._messages.slice(0, 5).map(message => this.renderMessage(message))}
       `;
        }
        return html `
       <div class="root">
         ${contentTemplate}
       </div>
     `;
    }
    /**
     * Render a message item
     *
     * @protected
     * @param {IMessage} message
     * @returns {TemplateResult}
     * @memberof MgtMessages
     */
    renderMessage(message) {
        return html `
       <div class="message" @click=${() => this.handleMessageClick(message)}>
         <div class="message__detail">
           <div class="message__subject">${message.subject}</div>
           <div class="message__from">${message.from.emailAddress.name}</div>
           <div class="message__message">${message.bodyPreview}</div>
         </div>
         <div class="message__date">${getRelativeDisplayDate(new Date(message.receivedDateTime))}</div>
       </div>
     `;
    }
    handleMessageClick(message) {
        window.open(message.webLink, '_blank', 'noreferrer');
    }
};
MgtMessages = __decorate([
    customElement('messages'),
    __metadata("design:paramtypes", [Array])
], MgtMessages);
export { MgtMessages };
//# sourceMappingURL=mgt-messages.js.map