{"version":3,"file":"mgt-teams-channel-picker.graph.js","sourceRoot":"src/","sources":["components/mgt-teams-channel-picker/mgt-teams-channel-picker.graph.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAqB,YAAY,EAAc,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEjG,OAAO,EACL,mBAAmB,EAEnB,wBAAwB,EACxB,uBAAuB,EACxB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAC;AAGlD;;;;;GAKG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAO,KAAa,EAAE,MAAgB,EAAmB,EAAE;IACtF,MAAM,KAAK,GAAG,CAAC,MAAM,KAAK;SACvB,GAAG,CAAC,iBAAiB,CAAC;SACtB,MAAM,CAAC,CAAC,aAAa,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;SAC3C,iBAAiB,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC;SACxC,GAAG,EAAE,CAA6B,CAAC;IAEtC,OAAO,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,CAAC;AACtB,CAAC,CAAA,CAAC;AAKF;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAO,KAAgB,EAAE,OAAiB,EAAwB,EAAE;IAC3G,IAAI,KAA6B,CAAC;IAClC,IAAI,MAAM,GAAgB,EAAE,CAAC;IAE7B,IAAI,uBAAuB,EAAE,EAAE;QAC7B,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAa,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvF,KAAK,MAAM,EAAE,IAAI,OAAO,EAAE;YACxB,IAAI;gBACF,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAC7C,IAAI,WAAW,IAAI,wBAAwB,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC,UAAU,EAAE;oBACnF,MAAM,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;iBAC1B;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,QAAQ;aACT;SACF;QACD,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE;YAC9B,OAAO,MAAM,CAAC;SACf;KACF;IAED,MAAM,MAAM,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACtC,MAAM,GAAG,EAAE,CAAC;IAEZ,KAAK,MAAM,EAAE,IAAI,OAAO,EAAE;QACxB,IAAI;YACF,MAAM,WAAW,GAAG,MAAM,mBAAmB,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;YAC7E,IAAI,uBAAuB,EAAE,IAAI,WAAW,EAAE;gBAC5C,MAAM,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;aACvC;YACD,MAAM,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;SAC1B;QAAC,OAAO,CAAC,EAAE;YACV,QAAQ;SACT;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, BetaGraph, CacheService, CacheStore, prepScopes } from '@microsoft/mgt-element';\nimport { Team } from '@microsoft/microsoft-graph-types';\nimport {\n  getPhotoForResource,\n  CachePhoto,\n  getPhotoInvalidationTime,\n  getIsPhotosCacheEnabled\n} from '../../graph/graph.photos';\nimport { schemas } from '../../graph/cacheStores';\nimport { CollectionResponse } from '@microsoft/mgt-element';\n\n/**\n * async promise, returns all Teams associated with the user logged in\n *\n * @returns {Promise<Team[]>}\n * @memberof Graph\n */\nexport const getAllMyTeams = async (graph: IGraph, scopes: string[]): Promise<Team[]> => {\n  const teams = (await graph\n    .api('/me/joinedTeams')\n    .select(['displayName', 'id', 'isArchived'])\n    .middlewareOptions(prepScopes(...scopes))\n    .get()) as CollectionResponse<Team>;\n\n  return teams?.value;\n};\n\n/** An object collection of cached photos. */\ntype CachePhotos = Record<string, CachePhoto>;\n\n/**\n * Load the photos for a give set of teamIds\n *\n * @param graph {BetaGraph}\n * @param teamIds {string[]}\n * @returns {Promise<CachePhotos>}\n */\nexport const getTeamsPhotosforPhotoIds = async (graph: BetaGraph, teamIds: string[]): Promise<CachePhotos> => {\n  let cache: CacheStore<CachePhoto>;\n  let photos: CachePhotos = {};\n\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.teams);\n    for (const id of teamIds) {\n      try {\n        const photoDetail = await cache.getValue(id);\n        if (photoDetail && getPhotoInvalidationTime() > Date.now() - photoDetail.timeCached) {\n          photos[id] = photoDetail;\n        }\n      } catch (_) {\n        // no-op\n      }\n    }\n    if (Object.keys(photos).length) {\n      return photos;\n    }\n  }\n\n  const scopes = ['team.readbasic.all'];\n  photos = {};\n\n  for (const id of teamIds) {\n    try {\n      const photoDetail = await getPhotoForResource(graph, `/teams/${id}`, scopes);\n      if (getIsPhotosCacheEnabled() && photoDetail) {\n        await cache.putValue(id, photoDetail);\n      }\n      photos[id] = photoDetail;\n    } catch (_) {\n      // no-op\n    }\n  }\n\n  return photos;\n};\n"]}