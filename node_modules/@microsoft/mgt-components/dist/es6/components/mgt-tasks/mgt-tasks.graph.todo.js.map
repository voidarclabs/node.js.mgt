{"version":3,"file":"mgt-tasks.graph.todo.js","sourceRoot":"src/","sources":["components/mgt-tasks/mgt-tasks.graph.todo.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { OutlookTask, OutlookTaskFolder, OutlookTaskGroup } from '@microsoft/microsoft-graph-types-beta';\nimport { CollectionResponse } from '@microsoft/mgt-element';\n\n/**\n * async promise, allows developer to add new to-do task\n *\n * @param {*} newTask\n * @returns {Promise<OutlookTask>}\n * @memberof BetaGraph\n */\nexport const addTodoTask = async (graph: IGraph, newTask: OutlookTask): Promise<OutlookTask> => {\n  const { parentFolderId = null } = newTask;\n\n  if (parentFolderId) {\n    return (await graph\n      .api(`/me/outlook/taskFolders/${parentFolderId}/tasks`)\n      .header('Cache-Control', 'no-store')\n      .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n      .post(newTask)) as OutlookTask;\n  } else {\n    return (await graph\n      .api('/me/outlook/tasks')\n      .header('Cache-Control', 'no-store')\n      .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n      .post(newTask)) as OutlookTask;\n  }\n};\n\n/**\n * async promise, returns all Outlook taskGroups associated with the logged in user\n *\n * @returns {Promise<OutlookTaskGroup[]>}\n * @memberof BetaGraph\n */\nexport const getAllMyTodoGroups = async (graph: IGraph): Promise<OutlookTaskGroup[]> => {\n  const groups = (await graph\n    .api('/me/outlook/taskGroups')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<OutlookTaskGroup>;\n\n  return groups?.value;\n};\n\n/**\n * async promise, returns all Outlook tasks associated with a taskFolder with folderId\n *\n * @param {string} folderId\n * @returns {Promise<OutlookTask[]>}\n * @memberof BetaGraph\n */\nexport const getAllTodoTasksForFolder = async (graph: IGraph, folderId: string): Promise<OutlookTask[]> => {\n  const tasks = (await graph\n    .api(`/me/outlook/taskFolders/${folderId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<OutlookTask>;\n\n  return tasks?.value;\n};\n\n/**\n * async promise, returns all Outlook taskFolders associated with groupId\n *\n * @param {string} groupId\n * @returns {Promise<OutlookTaskFolder[]>}\n * @memberof BetaGraph\n */\nexport const getFoldersForTodoGroup = async (graph: IGraph, groupId: string): Promise<OutlookTaskFolder[]> => {\n  const folders = (await graph\n    .api(`/me/outlook/taskGroups/${groupId}/taskFolders`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<OutlookTaskFolder>;\n\n  return folders?.value;\n};\n\n/**\n * async promise, returns to-do tasks from Outlook groups associated with a groupId\n *\n * @param {string} groupId\n * @returns {Promise<OutlookTaskGroup>}\n * @memberof BetaGraph\n */\nexport const getSingleTodoGroup = async (graph: IGraph, groupId: string): Promise<OutlookTaskGroup> =>\n  (await graph\n    .api(`/me/outlook/taskGroups/${groupId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as OutlookTaskGroup;\n\n/**\n * async promise, allows developer to remove task based on taskId\n *\n * @param {string} taskId\n * @param {string} eTag\n * @returns {Promise<any>}\n * @memberof BetaGraph\n */\nexport const removeTodoTask = async (graph: IGraph, taskId: string, eTag: string): Promise<void> => {\n  await graph\n    .api(`/me/outlook/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .header('If-Match', eTag)\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n};\n\n/**\n * async promise, allows developer to set to-do task to completed state\n *\n * @param {string} taskId\n * @param {string} eTag\n * @returns {Promise<OutlookTask>}\n * @memberof BetaGraph\n */\nexport const setTodoTaskComplete = async (graph: IGraph, taskId: string, eTag: string): Promise<OutlookTask> => {\n  return await setTodoTaskDetails(\n    graph,\n    taskId,\n    {\n      isReminderOn: false,\n      status: 'completed'\n    },\n    eTag\n  );\n};\n\n/**\n * async promise, allows developer to set to-do task to incomplete state\n *\n * @param {string} taskId\n * @param {string} eTag\n * @returns {Promise<OutlookTask>}\n * @memberof BetaGraph\n */\nexport const setTodoTaskIncomplete = async (graph: IGraph, taskId: string, eTag: string): Promise<OutlookTask> => {\n  return await setTodoTaskDetails(\n    graph,\n    taskId,\n    {\n      isReminderOn: true,\n      status: 'notStarted'\n    },\n    eTag\n  );\n};\n\n/**\n * async promise, allows developer to redefine to-do Task details associated with a taskId\n *\n * @param {string} taskId\n * @param {*} task\n * @param {string} eTag\n * @returns {Promise<OutlookTask>}\n * @memberof BetaGraph\n */\nexport const setTodoTaskDetails = async (\n  graph: IGraph,\n  taskId: string,\n  task: Partial<OutlookTask>,\n  eTag: string\n): Promise<OutlookTask> =>\n  (await graph\n    .api(`/me/outlook/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .header('If-Match', eTag)\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(task)) as OutlookTask;\n"]}