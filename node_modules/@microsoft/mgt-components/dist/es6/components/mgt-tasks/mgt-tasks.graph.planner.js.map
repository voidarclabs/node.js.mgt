{"version":3,"file":"mgt-tasks.graph.planner.js","sourceRoot":"src/","sources":["components/mgt-tasks/mgt-tasks.graph.planner.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { PlannerAssignments, PlannerBucket, PlannerPlan, PlannerTask } from '@microsoft/microsoft-graph-types';\nimport { CollectionResponse } from '@microsoft/mgt-element';\nimport { ITask } from './task-sources';\n\n/**\n * async promise, allows developer to create new Planner task\n *\n * @param {IGraph} graph\n * @param {(PlannerTask)} newTask\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport const addPlannerTask = async (graph: IGraph, newTask: PlannerTask): Promise<PlannerTask> => {\n  return (await graph\n    .api('/planner/tasks')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.ReadWrite.All'))\n    .post(newTask)) as PlannerTask;\n};\n\n/**\n * async promise, allows developer to assign people to task\n *\n * @param {IGraph} graph\n * @param {ITask} task\n * @param {PlannerAssignments} people\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport const assignPeopleToPlannerTask = async (\n  graph: IGraph,\n  task: ITask,\n  people: PlannerAssignments\n): Promise<void> => {\n  const details: PlannerTask = { assignments: people, appliedCategories: { category4: true } };\n  await setPlannerTaskDetails(graph, task, details);\n};\n\n/**\n * async promise, allows developer to remove Planner task associated with taskId\n *\n * @param {IGraph} graph\n * @param {ITask} task the task being removed.\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport const removePlannerTask = async (graph: IGraph, task: ITask): Promise<void> => {\n  await graph\n    .api(`/planner/tasks/${task.id}`)\n    .header('Cache-Control', 'no-store')\n    .header('If-Match', task.eTag)\n    .middlewareOptions(prepScopes('Group.ReadWrite.All'))\n    .delete();\n};\n\n/**\n * async promise, allows developer to set a task to complete, associated with taskId\n *\n * @param {IGraph} graph\n * @param {ITask} task\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport const setPlannerTaskComplete = async (graph: IGraph, task: ITask): Promise<void> => {\n  await setPlannerTaskDetails(graph, task, { percentComplete: 100 });\n};\n\n/**\n * async promise, allows developer to set a task to incomplete, associated with taskId\n *\n * @param {IGraph} graph\n * @param {ITask} task\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport const setPlannerTaskIncomplete = async (graph: IGraph, task: ITask): Promise<void> => {\n  await setPlannerTaskDetails(graph, task, { percentComplete: 0 });\n};\n\n/**\n * async promise, allows developer to set details of planner task associated with a taskId\n *\n * @param {IGraph} graph\n * @param {ITask} task\n * @param {PlannerTask} details\n * @returns {Promise<any>}\n * @memberof Graph\n */\nexport const setPlannerTaskDetails = async (graph: IGraph, task: ITask, details: PlannerTask): Promise<PlannerTask> => {\n  let response: PlannerTask;\n  try {\n    response = (await graph\n      .api(`/planner/tasks/${task.id}`)\n      .header('Cache-Control', 'no-store')\n      .middlewareOptions(prepScopes('Group.ReadWrite.All'))\n      .header('Prefer', 'return=representation')\n      .header('If-Match', task.eTag)\n      .update(details)) as PlannerTask;\n  } catch (_) {\n    /* empty */\n  }\n  return response;\n};\n\n/**\n * async promise, returns all planner plans associated with the group id\n *\n * @param {IGraph} graph\n * @param {string} groupId\n * @returns {(Promise<PlannerPlan[]>)}\n * @memberof Graph\n */\nexport const getPlansForGroup = async (graph: IGraph, groupId: string): Promise<PlannerPlan[]> => {\n  const scopes = 'Group.Read.All';\n\n  const uri = `/groups/${groupId}/planner/plans`;\n  const plans = (await graph\n    .api(uri)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes(scopes))\n    .get()) as CollectionResponse<PlannerPlan>;\n  return plans?.value;\n};\n\n/**\n * async promise, returns a single plan from the Graph associated with the planId\n *\n * @param {IGraph} graph\n * @param {string} planId\n * @returns {(Promise<PlannerPlan>)}\n * @memberof Graph\n */\nexport const getSinglePlannerPlan = async (graph: IGraph, planId: string): Promise<PlannerPlan> =>\n  (await graph\n    .api(`/planner/plans/${planId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.Read.All'))\n    .get()) as PlannerPlan;\n\n/**\n * async promise, returns bucket (for tasks) associated with a planId\n *\n * @param {IGraph} graph\n * @param {string} planId\n * @returns {(Promise<PlannerBucket[]>)}\n * @memberof Graph\n */\nexport const getBucketsForPlannerPlan = async (graph: IGraph, planId: string): Promise<PlannerBucket[]> => {\n  const buckets = (await graph\n    .api(`/planner/plans/${planId}/buckets`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.Read.All'))\n    .get()) as CollectionResponse<PlannerBucket>;\n\n  return buckets?.value;\n};\n\n/**\n * async promise, returns all planner plans associated with the user logged in\n *\n * @param {IGraph} graph\n * @returns {(Promise<PlannerPlan[]>)}\n * @memberof Graph\n */\nexport const getAllMyPlannerPlans = async (graph: IGraph): Promise<PlannerPlan[]> => {\n  const plans = (await graph\n    .api('/me/planner/plans')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.Read.All'))\n    .get()) as CollectionResponse<PlannerPlan>;\n\n  return plans?.value;\n};\n\n/**\n * async promise, returns all tasks from planner associated with a bucketId\n *\n * @param {IGraph} graph\n * @param {string} bucketId\n * @returns {(Promise<PlannerTask[][]>)}\n * @memberof Graph\n */\nexport const getTasksForPlannerBucket = async (graph: IGraph, bucketId: string): Promise<PlannerTask[]> => {\n  const tasks = (await graph\n    .api(`/planner/buckets/${bucketId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Group.Read.All'))\n    .get()) as CollectionResponse<PlannerTask>;\n\n  return tasks?.value;\n};\n"]}