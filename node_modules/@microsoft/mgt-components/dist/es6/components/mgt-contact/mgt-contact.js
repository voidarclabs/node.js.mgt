/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { TeamsHelper, customElement } from '@microsoft/mgt-element';
import { classMap } from 'lit/directives/class-map.js';
import { getEmailFromGraphEntity } from '../../graph/graph.people';
import { BasePersonCardSection } from '../BasePersonCardSection';
import { styles } from './mgt-contact-css';
import { getSvg, SvgIcon } from '../../utils/SvgHelper';
import { strings } from './strings';
/**
 * The contact details subsection of the person card
 *
 * @export
 * @class MgtContact
 * @extends {MgtTemplatedComponent}
 */
let MgtContact = class MgtContact extends BasePersonCardSection {
    /**
     * Array of styles to apply to the element. The styles should be defined
     * using the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    get strings() {
        return strings;
    }
    /**
     * Returns true if the component has data it can render
     *
     * @readonly
     * @abstract
     * @type {boolean}
     * @memberof BasePersonCardSection
     */
    get hasData() {
        if (!this._contactParts) {
            return false;
        }
        const availableParts = Object.values(this._contactParts).filter((p) => !!p.value);
        return !!availableParts.length;
    }
    constructor(person) {
        var _a;
        super();
        this._contactParts = {
            email: {
                icon: getSvg(SvgIcon.Email),
                onClick: () => this.sendEmail(getEmailFromGraphEntity(this._person)),
                showCompact: true,
                title: this.strings.emailTitle
            },
            chat: {
                icon: getSvg(SvgIcon.Chat),
                onClick: () => { var _a; return this.sendChat((_a = this._person) === null || _a === void 0 ? void 0 : _a.userPrincipalName); },
                showCompact: false,
                title: this.strings.chatTitle
            },
            businessPhone: {
                icon: getSvg(SvgIcon.Phone),
                onClick: () => { var _a, _b; return this.sendCall(((_b = (_a = this._person) === null || _a === void 0 ? void 0 : _a.businessPhones) === null || _b === void 0 ? void 0 : _b.length) > 0 ? this._person.businessPhones[0] : null); },
                showCompact: true,
                title: this.strings.businessPhoneTitle
            },
            cellPhone: {
                icon: getSvg(SvgIcon.CellPhone),
                onClick: () => { var _a; return this.sendCall((_a = this._person) === null || _a === void 0 ? void 0 : _a.mobilePhone); },
                showCompact: true,
                title: this.strings.cellPhoneTitle
            },
            department: {
                icon: getSvg(SvgIcon.Department),
                showCompact: false,
                title: this.strings.departmentTitle
            },
            title: {
                icon: getSvg(SvgIcon.Person),
                showCompact: false,
                title: this.strings.titleTitle
            },
            officeLocation: {
                icon: getSvg(SvgIcon.OfficeLocation),
                showCompact: true,
                title: this.strings.officeLocationTitle
            }
        };
        /**
         * Send a call to the user
         *
         * @protected
         * @memberof MgtContact
         */
        this.sendCall = (phone) => {
            this.sendLink('tel:', phone);
        };
        this._person = person;
        this._contactParts.email.value = getEmailFromGraphEntity(this._person);
        this._contactParts.chat.value = this._person.userPrincipalName;
        this._contactParts.cellPhone.value = this._person.mobilePhone;
        this._contactParts.department.value = this._person.department;
        this._contactParts.title.value = this._person.jobTitle;
        this._contactParts.officeLocation.value = this._person.officeLocation;
        if ((_a = this._person.businessPhones) === null || _a === void 0 ? void 0 : _a.length) {
            this._contactParts.businessPhone.value = this._person.businessPhones[0];
        }
    }
    /**
     * The name for display in the overview section.
     *
     * @readonly
     * @type {string}
     * @memberof MgtContact
     */
    get displayName() {
        return this.strings.contactSectionTitle;
    }
    /**
     * The title for display when rendered as a full card.
     *
     * @readonly
     * @type {string}
     * @memberof MgtContact
     */
    get cardTitle() {
        return this.strings.contactSectionTitle;
    }
    // Defines the skeleton for what contact fields are available and what they do.
    /**
     * Render the icon for display in the navigation ribbon.
     *
     * @returns {TemplateResult}
     * @memberof MgtContact
     */
    renderIcon() {
        return getSvg(SvgIcon.Contact);
    }
    /**
     * Reset any state in the section
     *
     * @protected
     * @memberof MgtContact
     */
    clearState() {
        super.clearState();
        for (const key of Object.keys(this._contactParts)) {
            this._contactParts[key].value = null;
        }
    }
    /**
     * Render the compact view
     *
     * @returns {TemplateResult}
     * @memberof MgtContact
     */
    renderCompactView() {
        if (!this.hasData) {
            return null;
        }
        const availableParts = Object.values(this._contactParts).filter((p) => !!p.value);
        // Filter for compact mode parts with values
        let compactParts = Object.values(availableParts).filter((p) => !!p.value && p.showCompact);
        if (!(compactParts === null || compactParts === void 0 ? void 0 : compactParts.length)) {
            compactParts = Object.values(availableParts).slice(0, 2);
        }
        const contentTemplate = html `
      ${compactParts.map(p => this.renderContactPart(p))}
    `;
        return html `
      <div class="root compact" dir=${this.direction}>
        ${contentTemplate}
      </div>
    `;
    }
    /**
     * Render the full view
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtContact
     */
    renderFullView() {
        let contentTemplate;
        if (this.hasData) {
            // Filter for parts with values only
            const availableParts = Object.values(this._contactParts).filter((p) => !!p.value);
            contentTemplate = html `
        ${availableParts.map(part => this.renderContactPart(part))}
      `;
        }
        return html `
      <div class="root" dir=${this.direction}>
        ${contentTemplate}
      </div>
    `;
    }
    /**
     * Render a specific contact part
     *
     * @protected
     * @param {IContactPart} part
     * @returns {TemplateResult}
     * @memberof MgtContact
     */
    renderContactPart(part) {
        let isPhone = false;
        if (part.title === 'Mobile Phone' || part.title === 'Business Phone') {
            isPhone = true;
        }
        const partLinkClasses = {
            part__link: true,
            phone: isPhone
        };
        const valueTemplate = part.onClick
            ? html `
          <span class=${classMap(partLinkClasses)} @click=${(e) => part.onClick(e)}>${part.value}</span>
        `
            : html `
          ${part.value}
        `;
        return html `
      <div class="part" role="button" @click=${(e) => this.handlePartClick(e, part.value)} tabindex="0">
        <div class="part__icon" aria-label=${part.title} title=${part.title}>${part.icon}</div>
        <div class="part__details">
          <div class="part__title">${part.title}</div>
          <div class="part__value" title=${part.title}>${valueTemplate}</div>
        </div>
        <div
          class="part__copy"
          aria-label=${this.strings.copyToClipboardButton}
          title=${this.strings.copyToClipboardButton}
        >
          ${getSvg(SvgIcon.Copy)}
        </div>
      </div>
    `;
    }
    /**
     * Handle the click event for contact parts
     *
     * @protected
     * @memberof MgtContact
     */
    handlePartClick(e, value) {
        if (value) {
            void navigator.clipboard.writeText(value);
        }
    }
    sendLink(protocol, resource) {
        if (resource) {
            window.open(`${protocol}${resource}`, '_blank', 'noreferrer');
        }
        else {
            // eslint-disable-next-line no-console
            console.error(`ðŸ¦’: Target resource for ${protocol} link was not provided: resource: ${resource}`);
        }
    }
    /**
     * Send a chat message to the user
     *
     * @protected
     * @memberof MgtContact
     */
    sendChat(upn) {
        if (!upn) {
            // eslint-disable-next-line no-console
            console.error("ðŸ¦’: Can't send chat when upn is not provided");
            return;
        }
        const url = `https://teams.microsoft.com/l/chat/0/0?users=${upn}`;
        const openWindow = () => window.open(url, '_blank', 'noreferrer');
        if (TeamsHelper.isAvailable) {
            TeamsHelper.executeDeepLink(url, (status) => {
                if (!status) {
                    openWindow();
                }
            });
        }
        else {
            openWindow();
        }
    }
    /**
     * Send an email to the user
     *
     * @protected
     * @memberof MgtContact
     */
    sendEmail(email) {
        this.sendLink('mailto:', email);
    }
};
MgtContact = __decorate([
    customElement('contact')
    // @customElement('mgt-contact')
    ,
    __metadata("design:paramtypes", [Object])
], MgtContact);
export { MgtContact };
//# sourceMappingURL=mgt-contact.js.map