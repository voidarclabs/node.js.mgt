/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { Providers, ProviderState, MgtTemplatedComponent } from '@microsoft/mgt-element';
import { strings } from './strings';
import { registerFluentComponents } from '../../utils/FluentComponents';
import { fluentTextField, fluentButton, fluentCalendar } from '@fluentui/web-components';
registerFluentComponents(fluentTextField, fluentButton, fluentCalendar);
/**
 * The foundation for creating task based components.
 *
 * @export
 * @class MgtTasksBase
 * @extends {MgtTemplatedComponent}
 */
export class MgtTasksBase extends MgtTemplatedComponent {
    get strings() {
        return strings;
    }
    constructor() {
        super();
        /**
         * Handle when a task is clicked
         *
         * @protected
         * @param {Event} e
         * @param {TodoTask} task
         * @memberof MgtTasksBase
         */
        this.handleTaskClick = (task) => {
            this.fireCustomEvent('taskClick', { task });
        };
        this.onResize = () => {
            if (this.mediaQuery !== this._previousMediaQuery) {
                this._previousMediaQuery = this.mediaQuery;
                this.requestUpdate();
            }
        };
        this.clearState();
        this._previousMediaQuery = this.mediaQuery;
    }
    /**
     * Synchronizes property values when attributes change.
     *
     * @param {*} name
     * @param {*} oldValue
     * @param {*} newValue
     * @memberof MgtTasks
     */
    attributeChangedCallback(name, oldVal, newVal) {
        super.attributeChangedCallback(name, oldVal, newVal);
        switch (name) {
            case 'target-id':
            case 'initial-id':
                this.clearState();
                void this.requestStateUpdate();
                break;
        }
    }
    /**
     * updates provider state
     *
     * @memberof MgtTasks
     */
    connectedCallback() {
        super.connectedCallback();
        window.addEventListener('resize', this.onResize);
    }
    /**
     * removes updates on provider state
     *
     * @memberof MgtTasks
     */
    disconnectedCallback() {
        window.removeEventListener('resize', this.onResize);
        super.disconnectedCallback();
    }
    /**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     */
    render() {
        const provider = Providers.globalProvider;
        if (!provider || provider.state !== ProviderState.SignedIn) {
            return html ``;
        }
        if (this.isLoadingState) {
            return this.renderLoadingTask();
        }
        const picker = this.renderPicker();
        const newTaskTemplate = this.renderNewTask();
        const tasksTemplate = this.isLoadingState ? this.renderLoadingTask() : this.renderTasks();
        return html `
      ${picker}
      ${newTaskTemplate}
      <div class="tasks" dir=${this.direction}>
        ${tasksTemplate}
      </div>
    `;
    }
    /**
     * Render a task in a loading state.
     *
     * @protected
     * @returns
     * @memberof MgtTodo
     */
    renderLoadingTask() {
        return html `
      <div class="task loading-task">
        <div class="task-details">
          <div class="title"></div>
          <div class="task-due"></div>
          <div class="task-delete"></div>
        </div>
      </div>
    `;
    }
    /**
     * Clear the component state.
     *
     * @protected
     * @memberof MgtTasksBase
     */
    clearState() {
        this.requestUpdate();
    }
    /**
     * Convert a date to a properly formatted string
     *
     * @protected
     * @param {Date} date
     * @returns
     * @memberof MgtTasksBase
     */
    dateToInputValue(date) {
        if (date) {
            return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split('T')[0];
        }
        return null;
    }
}
__decorate([
    property({ attribute: 'read-only', type: Boolean }),
    __metadata("design:type", Boolean)
], MgtTasksBase.prototype, "readOnly", void 0);
__decorate([
    property({ attribute: 'hide-header', type: Boolean }),
    __metadata("design:type", Boolean)
], MgtTasksBase.prototype, "hideHeader", void 0);
__decorate([
    property({ attribute: 'hide-options', type: Boolean }),
    __metadata("design:type", Boolean)
], MgtTasksBase.prototype, "hideOptions", void 0);
__decorate([
    property({ attribute: 'target-id', type: String }),
    __metadata("design:type", String)
], MgtTasksBase.prototype, "targetId", void 0);
__decorate([
    property({ attribute: 'initial-id', type: String }),
    __metadata("design:type", String)
], MgtTasksBase.prototype, "initialId", void 0);
//# sourceMappingURL=mgt-tasks-base.js.map