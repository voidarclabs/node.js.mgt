{"version":3,"file":"mgt-tasks-base.js","sourceRoot":"src/","sources":["components/mgt-tasks-base/mgt-tasks-base.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ComponentMediaQuery, Providers, ProviderState, MgtTemplatedComponent } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentTextField, fluentButton, fluentCalendar } from '@fluentui/web-components';\nimport { TodoTask } from '@microsoft/microsoft-graph-types';\n\nregisterFluentComponents(fluentTextField, fluentButton, fluentCalendar);\n\n/**\n * The foundation for creating task based components.\n *\n * @export\n * @class MgtTasksBase\n * @extends {MgtTemplatedComponent}\n */\nexport abstract class MgtTasksBase extends MgtTemplatedComponent {\n  /**\n   * determines if tasks are un-editable\n   *\n   * @type {boolean}\n   */\n  @property({ attribute: 'read-only', type: Boolean })\n  public readOnly: boolean;\n\n  /**\n   * sets whether the header is rendered\n   *\n   * @type {boolean}\n   * @memberof MgtTasks\n   */\n  @property({ attribute: 'hide-header', type: Boolean })\n  public hideHeader: boolean;\n\n  /**\n   * sets whether the options are rendered\n   *\n   * @type {boolean}\n   * @memberof MgtTasks\n   */\n  @property({ attribute: 'hide-options', type: Boolean })\n  public hideOptions: boolean;\n\n  /**\n   * if set, the component will only show tasks from the target list\n   *\n   * @type {string}\n   */\n  @property({ attribute: 'target-id', type: String })\n  public targetId: string;\n\n  /**\n   * if set, the component will first show tasks from this list\n   *\n   * @type {string}\n   * @memberof MgtTodo\n   */\n  @property({ attribute: 'initial-id', type: String })\n  public initialId: string;\n\n  private _previousMediaQuery: ComponentMediaQuery;\n\n  protected get strings(): Record<string, string> {\n    return strings;\n  }\n\n  constructor() {\n    super();\n\n    this.clearState();\n    this._previousMediaQuery = this.mediaQuery;\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * @param {*} name\n   * @param {*} oldValue\n   * @param {*} newValue\n   * @memberof MgtTasks\n   */\n  public attributeChangedCallback(name: string, oldVal: string, newVal: string) {\n    super.attributeChangedCallback(name, oldVal, newVal);\n    switch (name) {\n      case 'target-id':\n      case 'initial-id':\n        this.clearState();\n        void this.requestStateUpdate();\n        break;\n    }\n  }\n\n  /**\n   * updates provider state\n   *\n   * @memberof MgtTasks\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  /**\n   * removes updates on provider state\n   *\n   * @memberof MgtTasks\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('resize', this.onResize);\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render() {\n    const provider = Providers.globalProvider;\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return html``;\n    }\n\n    if (this.isLoadingState) {\n      return this.renderLoadingTask();\n    }\n\n    const picker = this.renderPicker();\n    const newTaskTemplate = this.renderNewTask();\n    const tasksTemplate = this.isLoadingState ? this.renderLoadingTask() : this.renderTasks();\n\n    return html`\n      ${picker}\n      ${newTaskTemplate}\n      <div class=\"tasks\" dir=${this.direction}>\n        ${tasksTemplate}\n      </div>\n    `;\n  }\n\n  /**\n   * Render a task in a loading state.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTodo\n   */\n  protected renderLoadingTask() {\n    return html`\n      <div class=\"task loading-task\">\n        <div class=\"task-details\">\n          <div class=\"title\"></div>\n          <div class=\"task-due\"></div>\n          <div class=\"task-delete\"></div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the panel for creating a new task.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderNewTask(): TemplateResult;\n\n  /**\n   * Render the generic picker.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderPicker(): TemplateResult;\n\n  /**\n   * Render the list of todo tasks\n   *\n   * @protected\n   * @abstract\n   * @param {ITask[]} tasks\n   * @returns {TemplateResult}\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderTasks(): TemplateResult;\n\n  /**\n   * Make a service call to create the new task object.\n   *\n   * @protected\n   * @abstract\n   * @memberof MgtTasksBase\n   */\n  protected abstract createNewTask(): Promise<void>;\n\n  /**\n   * Clear the form data from the new task panel.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract clearNewTaskData(): void;\n\n  /**\n   * Clear the component state.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected clearState(): void {\n    this.requestUpdate();\n  }\n\n  /**\n   * Handle when a task is clicked\n   *\n   * @protected\n   * @param {Event} e\n   * @param {TodoTask} task\n   * @memberof MgtTasksBase\n   */\n  protected handleTaskClick = (task: TodoTask): void => {\n    this.fireCustomEvent('taskClick', { task });\n  };\n\n  /**\n   * Convert a date to a properly formatted string\n   *\n   * @protected\n   * @param {Date} date\n   * @returns\n   * @memberof MgtTasksBase\n   */\n  protected dateToInputValue(date: Date): string {\n    if (date) {\n      return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n    }\n\n    return null;\n  }\n\n  private readonly onResize = () => {\n    if (this.mediaQuery !== this._previousMediaQuery) {\n      this._previousMediaQuery = this.mediaQuery;\n      this.requestUpdate();\n    }\n  };\n}\n"]}