{"version":3,"file":"mgt-theme-toggle.tests.js","sourceRoot":"src/","sources":["components/mgt-theme-toggle/mgt-theme-toggle.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n// import the mock for media match first to ensure it's hoisted and available for our dependencies\nimport './mock-media-match';\nimport { screen } from 'testing-library__dom';\nimport { fixture } from '@open-wc/testing-helpers';\nimport './mgt-theme-toggle';\n\nclass Deferred<T = unknown> {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (reason?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\ndescribe('mgt-theme-toggle - tests', () => {\n  it('should render', async () => {\n    await fixture('<mgt-theme-toggle></mgt-theme-toggle>');\n    const toggle = await screen.findByRole('switch');\n    expect(toggle).not.toBeNull();\n  });\n  it(\"should emit darkmodechanged with the current 'checked' state on click\", async () => {\n    let darkModeState = false;\n    const element = await fixture('<mgt-theme-toggle></mgt-theme-toggle>');\n    const toggle: HTMLInputElement = await screen.findByRole('switch');\n    expect(toggle).not.toBeNull();\n    let deferred = new Deferred<boolean>();\n    element.addEventListener('darkmodechanged', (e: CustomEvent<boolean>) => {\n      deferred.resolve(e.detail);\n    });\n    expect(darkModeState).toBe(false);\n    expect(toggle.checked).toBe(false);\n    toggle.click();\n    expect(toggle.checked).toBe(true);\n    darkModeState = await deferred.promise;\n    expect(darkModeState).toBe(true);\n    deferred = new Deferred<boolean>();\n    toggle.click();\n    expect(toggle.checked).toBe(false);\n    darkModeState = await deferred.promise;\n    expect(darkModeState).toBe(false);\n  });\n\n  it('should have a checked switch if mode is dark', async () => {\n    await fixture('<mgt-theme-toggle mode=\"dark\"></mgt-theme-toggle>');\n    const toggle = await screen.findByRole('switch');\n    expect(toggle).not.toBeNull();\n    expect(toggle.getAttribute('aria-checked')).toBe('true');\n    expect(toggle.getAttribute('checked')).toBe('true');\n  });\n\n  it('should not have a checked switch if mode is light', async () => {\n    await fixture('<mgt-theme-toggle></mgt-theme-toggle>');\n    const toggle = await screen.findByRole('switch');\n    expect(toggle).not.toBeNull();\n    expect(toggle.getAttribute('aria-checked')).toBe('false');\n    expect(toggle.getAttribute('checked')).toBe('false');\n  });\n\n  it('should have a checked switch if user prefers dark mode and no mode is set', async () => {\n    // redefine matchMedia to return true\n    Object.defineProperty(window, 'matchMedia', {\n      writable: true,\n      value: jest.fn().mockImplementation((query: unknown) => ({\n        matches: true,\n        media: query,\n        onchange: null,\n        addListener: jest.fn(), // deprecated\n        removeListener: jest.fn(), // deprecated\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn()\n      }))\n    });\n    await fixture('<mgt-theme-toggle></mgt-theme-toggle>');\n    const toggle = await screen.findByRole('switch');\n    expect(toggle).not.toBeNull();\n    expect(toggle.getAttribute('aria-checked')).toBe('true');\n    expect(toggle.getAttribute('checked')).toBe('true');\n  });\n});\n"]}