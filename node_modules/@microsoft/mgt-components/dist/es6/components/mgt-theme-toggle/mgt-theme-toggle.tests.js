var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
// import the mock for media match first to ensure it's hoisted and available for our dependencies
import './mock-media-match';
import { screen } from 'testing-library__dom';
import { fixture } from '@open-wc/testing-helpers';
import './mgt-theme-toggle';
class Deferred {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
}
describe('mgt-theme-toggle - tests', () => {
    it('should render', () => __awaiter(void 0, void 0, void 0, function* () {
        yield fixture('<mgt-theme-toggle></mgt-theme-toggle>');
        const toggle = yield screen.findByRole('switch');
        expect(toggle).not.toBeNull();
    }));
    it("should emit darkmodechanged with the current 'checked' state on click", () => __awaiter(void 0, void 0, void 0, function* () {
        let darkModeState = false;
        const element = yield fixture('<mgt-theme-toggle></mgt-theme-toggle>');
        const toggle = yield screen.findByRole('switch');
        expect(toggle).not.toBeNull();
        let deferred = new Deferred();
        element.addEventListener('darkmodechanged', (e) => {
            deferred.resolve(e.detail);
        });
        expect(darkModeState).toBe(false);
        expect(toggle.checked).toBe(false);
        toggle.click();
        expect(toggle.checked).toBe(true);
        darkModeState = yield deferred.promise;
        expect(darkModeState).toBe(true);
        deferred = new Deferred();
        toggle.click();
        expect(toggle.checked).toBe(false);
        darkModeState = yield deferred.promise;
        expect(darkModeState).toBe(false);
    }));
    it('should have a checked switch if mode is dark', () => __awaiter(void 0, void 0, void 0, function* () {
        yield fixture('<mgt-theme-toggle mode="dark"></mgt-theme-toggle>');
        const toggle = yield screen.findByRole('switch');
        expect(toggle).not.toBeNull();
        expect(toggle.getAttribute('aria-checked')).toBe('true');
        expect(toggle.getAttribute('checked')).toBe('true');
    }));
    it('should not have a checked switch if mode is light', () => __awaiter(void 0, void 0, void 0, function* () {
        yield fixture('<mgt-theme-toggle></mgt-theme-toggle>');
        const toggle = yield screen.findByRole('switch');
        expect(toggle).not.toBeNull();
        expect(toggle.getAttribute('aria-checked')).toBe('false');
        expect(toggle.getAttribute('checked')).toBe('false');
    }));
    it('should have a checked switch if user prefers dark mode and no mode is set', () => __awaiter(void 0, void 0, void 0, function* () {
        // redefine matchMedia to return true
        Object.defineProperty(window, 'matchMedia', {
            writable: true,
            value: jest.fn().mockImplementation((query) => ({
                matches: true,
                media: query,
                onchange: null,
                addListener: jest.fn(),
                removeListener: jest.fn(),
                addEventListener: jest.fn(),
                removeEventListener: jest.fn(),
                dispatchEvent: jest.fn()
            }))
        });
        yield fixture('<mgt-theme-toggle></mgt-theme-toggle>');
        const toggle = yield screen.findByRole('switch');
        expect(toggle).not.toBeNull();
        expect(toggle.getAttribute('aria-checked')).toBe('true');
        expect(toggle.getAttribute('checked')).toBe('true');
    }));
});
//# sourceMappingURL=mgt-theme-toggle.tests.js.map