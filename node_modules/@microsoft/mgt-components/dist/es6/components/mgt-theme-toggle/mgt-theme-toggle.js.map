{"version":3,"file":"mgt-theme-toggle.js","sourceRoot":"src/","sources":["components/mgt-theme-toggle/mgt-theme-toggle.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EAAE,IAAI,EAAkB,MAAM,KAAK,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AACzE,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,wBAAwB,EAAE,MAAM,8BAA8B,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AACxD,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,wBAAwB,CAAC,YAAY,CAAC,CAAC;AAEvC;;;;;;;;GAQG;AAEI,IAAM,cAAc,GAApB,MAAM,cAAe,SAAQ,gBAAgB;IAClD;QACE,KAAK,EAAE,CAAC;QAkEO,oBAAe,GAAG,CAAC,CAAQ,EAAE,EAAE;YAC9C,IAAI,CAAC,cAAc,GAAI,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC;QAC/D,CAAC,CAAC;QAnEA,MAAM,eAAe,GAAG,MAAM,CAAC,UAAU,CAAC,6BAA6B,CAAC,CAAC,OAAO,CAAC;QACjF,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;QACtC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACvC,CAAC;IACD;;;;;;OAMG;IACH,IAAc,OAAO;QACnB,OAAO,OAAO,CAAC;IACjB,CAAC;IAuBD;;;;;;OAMG;IACH,OAAO,CAAC,iBAAuC;QAC7C,IAAI,iBAAiB,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;YAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACtC;IACH,CAAC;IAED;;;;;OAKG;IACH,MAAM;QACJ,OAAO,IAAI,CAAA;+BACgB,IAAI,CAAC,cAAc,YAAY,IAAI,CAAC,eAAe;uCAC3C,OAAO,CAAC,EAAE;yCACR,OAAO,CAAC,GAAG;wCACZ,OAAO,CAAC,KAAK;;CAEpD,CAAC;IACA,CAAC;IAMO,UAAU,CAAC,MAAe;QAChC,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;QAC9C,UAAU,CAAC,WAAW,CAAC,CAAC;QAExB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;QAClE,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,WAAW,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAClF,CAAC;CACF,CAAA;AA3CQ;IAbN,QAAQ,CAAC;QACR,SAAS,EAAE,MAAM;QACjB,OAAO,EAAE,IAAI;QACb,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE;YACT,aAAa,EAAE,CAAC,KAAa,EAAE,EAAE;gBAC/B,OAAO,KAAK,KAAK,MAAM,CAAC;YAC1B,CAAC;YACD,WAAW,EAAE,CAAC,KAAc,EAAE,EAAE;gBAC9B,OAAO,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YAClC,CAAC;SACF;KACF,CAAC;;sDAC6B;AArCpB,cAAc;IAD1B,aAAa,CAAC,cAAc,CAAC;;GACjB,cAAc,CAgF1B","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { customElement, MgtBaseComponent } from '@microsoft/mgt-element';\nimport { fluentSwitch } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { applyTheme } from '../../styles/theme-manager';\nimport { strings } from './strings';\n\nregisterFluentComponents(fluentSwitch);\n\n/**\n * Toggle to switch between light and dark mode\n * Will detect browser preference and set accordingly or dark mode can be forced\n *\n * @fires {CustomEvent<boolean>} darkmodechanged - Fired when dark mode is toggled by a user action\n *\n * @class MgtDarkToggle\n * @extends {MgtBaseComponent}\n */\n@customElement('theme-toggle')\nexport class MgtThemeToggle extends MgtBaseComponent {\n  constructor() {\n    super();\n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme:dark)').matches;\n    this.darkModeActive = prefersDarkMode;\n    this.applyTheme(this.darkModeActive);\n  }\n  /**\n   * Provides strings for localization\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtDarkToggle\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  /**\n   * Controls whether dark mode is active\n   *\n   * @type {boolean}\n   * @memberof MgtDarkToggle\n   */\n  @property({\n    attribute: 'mode',\n    reflect: true,\n    type: String,\n    converter: {\n      fromAttribute: (value: string) => {\n        return value === 'dark';\n      },\n      toAttribute: (value: boolean) => {\n        return value ? 'dark' : 'light';\n      }\n    }\n  })\n  public darkModeActive: boolean;\n\n  /**\n   * Fires after a component is updated.\n   * Allows a component to trigger side effects after updating.\n   *\n   * @param {Map<string, any>} changedProperties\n   * @memberof MgtDarkToggle\n   */\n  updated(changedProperties: Map<string, unknown>): void {\n    if (changedProperties.has('darkModeActive')) {\n      this.applyTheme(this.darkModeActive);\n    }\n  }\n\n  /**\n   * renders the component\n   *\n   * @return {TemplateResult}\n   * @memberof MgtDarkToggle\n   */\n  render(): TemplateResult {\n    return html`\n      <fluent-switch checked=${this.darkModeActive} @change=${this.onSwitchChanged}>\n        <span slot=\"checked-message\">${strings.on}</span>\n        <span slot=\"unchecked-message\">${strings.off}</span>\n        <label for=\"direction-switch\">${strings.label}</label>\n      </fluent-switch>\n`;\n  }\n\n  private readonly onSwitchChanged = (e: Event) => {\n    this.darkModeActive = (e.target as HTMLInputElement).checked;\n  };\n\n  private applyTheme(active: boolean) {\n    const targetTheme = active ? 'dark' : 'light';\n    applyTheme(targetTheme);\n\n    document.body.classList.remove('mgt-dark-mode', 'mgt-light-mode');\n    document.body.classList.add(`mgt-${targetTheme}-mode`);\n    this.fireCustomEvent('darkmodechanged', this.darkModeActive, true, false, true);\n  }\n}\n"]}