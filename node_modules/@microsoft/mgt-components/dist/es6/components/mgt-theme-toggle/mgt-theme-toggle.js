/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { customElement, MgtBaseComponent } from '@microsoft/mgt-element';
import { fluentSwitch } from '@fluentui/web-components';
import { registerFluentComponents } from '../../utils/FluentComponents';
import { applyTheme } from '../../styles/theme-manager';
import { strings } from './strings';
registerFluentComponents(fluentSwitch);
/**
 * Toggle to switch between light and dark mode
 * Will detect browser preference and set accordingly or dark mode can be forced
 *
 * @fires {CustomEvent<boolean>} darkmodechanged - Fired when dark mode is toggled by a user action
 *
 * @class MgtDarkToggle
 * @extends {MgtBaseComponent}
 */
let MgtThemeToggle = class MgtThemeToggle extends MgtBaseComponent {
    constructor() {
        super();
        this.onSwitchChanged = (e) => {
            this.darkModeActive = e.target.checked;
        };
        const prefersDarkMode = window.matchMedia('(prefers-color-scheme:dark)').matches;
        this.darkModeActive = prefersDarkMode;
        this.applyTheme(this.darkModeActive);
    }
    /**
     * Provides strings for localization
     *
     * @readonly
     * @protected
     * @memberof MgtDarkToggle
     */
    get strings() {
        return strings;
    }
    /**
     * Fires after a component is updated.
     * Allows a component to trigger side effects after updating.
     *
     * @param {Map<string, any>} changedProperties
     * @memberof MgtDarkToggle
     */
    updated(changedProperties) {
        if (changedProperties.has('darkModeActive')) {
            this.applyTheme(this.darkModeActive);
        }
    }
    /**
     * renders the component
     *
     * @return {TemplateResult}
     * @memberof MgtDarkToggle
     */
    render() {
        return html `
      <fluent-switch checked=${this.darkModeActive} @change=${this.onSwitchChanged}>
        <span slot="checked-message">${strings.on}</span>
        <span slot="unchecked-message">${strings.off}</span>
        <label for="direction-switch">${strings.label}</label>
      </fluent-switch>
`;
    }
    applyTheme(active) {
        const targetTheme = active ? 'dark' : 'light';
        applyTheme(targetTheme);
        document.body.classList.remove('mgt-dark-mode', 'mgt-light-mode');
        document.body.classList.add(`mgt-${targetTheme}-mode`);
        this.fireCustomEvent('darkmodechanged', this.darkModeActive, true, false, true);
    }
};
__decorate([
    property({
        attribute: 'mode',
        reflect: true,
        type: String,
        converter: {
            fromAttribute: (value) => {
                return value === 'dark';
            },
            toAttribute: (value) => {
                return value ? 'dark' : 'light';
            }
        }
    }),
    __metadata("design:type", Boolean)
], MgtThemeToggle.prototype, "darkModeActive", void 0);
MgtThemeToggle = __decorate([
    customElement('theme-toggle'),
    __metadata("design:paramtypes", [])
], MgtThemeToggle);
export { MgtThemeToggle };
//# sourceMappingURL=mgt-theme-toggle.js.map