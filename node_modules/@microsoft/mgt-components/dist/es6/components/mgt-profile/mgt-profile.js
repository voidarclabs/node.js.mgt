/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html, nothing } from 'lit';
import { BasePersonCardSection } from '../BasePersonCardSection';
import { getSvg, SvgIcon } from '../../utils/SvgHelper';
import { styles } from './mgt-profile-css';
import { strings } from './strings';
import { customElement } from '@microsoft/mgt-element';
/**
 * The user profile subsection of the person card
 *
 * @export
 * @class MgtProfile
 * @extends {MgtTemplatedComponent}
 *
 * @cssprop --token-overflow-color - {Color} Color of the text showing more undisplayed values i.e. +3 more
 */
let MgtProfile = class MgtProfile extends BasePersonCardSection {
    /**
     * Array of styles to apply to the element. The styles should be defined
     * using the `css` tag function.
     */
    static get styles() {
        return styles;
    }
    get strings() {
        return strings;
    }
    /**
     * The name for display in the overview section.
     *
     * @readonly
     * @type {string}
     * @memberof MgtProfile
     */
    get displayName() {
        return this.strings.SkillsAndExperienceSectionTitle;
    }
    /**
     * The title for display when rendered as a full card.
     *
     * @readonly
     * @type {string}
     * @memberof MgtOrganization
     */
    get cardTitle() {
        return this.strings.AboutCompactSectionTitle;
    }
    /**
     * Returns true if the profile contains data
     * that can be rendered
     *
     * @readonly
     * @type {boolean}
     * @memberof MgtProfile
     */
    get hasData() {
        var _a, _b;
        if (!this.profile) {
            return false;
        }
        const { languages, skills, positions, educationalActivities } = this.profile;
        return ([
            this._birthdayAnniversary,
            (_a = this._personalInterests) === null || _a === void 0 ? void 0 : _a.length,
            (_b = this._professionalInterests) === null || _b === void 0 ? void 0 : _b.length,
            languages === null || languages === void 0 ? void 0 : languages.length,
            skills === null || skills === void 0 ? void 0 : skills.length,
            positions === null || positions === void 0 ? void 0 : positions.length,
            educationalActivities === null || educationalActivities === void 0 ? void 0 : educationalActivities.length
        ].filter(v => !!v).length > 0);
    }
    /**
     * The user's profile metadata
     *
     * @protected
     * @type {IProfile}
     * @memberof MgtProfile
     */
    get profile() {
        return this._profile;
    }
    set profile(value) {
        if (value === this._profile) {
            return;
        }
        this._profile = value;
        this._birthdayAnniversary = (value === null || value === void 0 ? void 0 : value.anniversaries) ? value.anniversaries.find(this.isBirthdayAnniversary) : null;
        this._personalInterests = (value === null || value === void 0 ? void 0 : value.interests) ? value.interests.filter(this.isPersonalInterest) : null;
        this._professionalInterests = (value === null || value === void 0 ? void 0 : value.interests) ? value.interests.filter(this.isProfessionalInterest) : null;
    }
    constructor(profile) {
        super();
        this.isPersonalInterest = (interest) => {
            var _a;
            return (_a = interest.categories) === null || _a === void 0 ? void 0 : _a.includes('personal');
        };
        this.isProfessionalInterest = (interest) => {
            var _a;
            return (_a = interest.categories) === null || _a === void 0 ? void 0 : _a.includes('professional');
        };
        this.isBirthdayAnniversary = (anniversary) => {
            return anniversary.type === 'birthday';
        };
        this.profile = profile;
    }
    /**
     * Render the icon for display in the navigation ribbon.
     *
     * @returns {TemplateResult}
     * @memberof MgtProfile
     */
    renderIcon() {
        return getSvg(SvgIcon.Profile);
    }
    /**
     * Reset any state in the section
     *
     * @protected
     * @memberof MgtProfile
     */
    clearState() {
        super.clearState();
        this.profile = null;
    }
    /**
     * Render the compact view
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtProfile
     */
    renderCompactView() {
        return html `
       <div class="root compact" dir=${this.direction}>
         ${this.renderSubSections().slice(0, 2)}
       </div>
     `;
    }
    /**
     * Render the full view
     *
     * @protected
     * @returns
     * @memberof MgtProfile
     */
    renderFullView() {
        this.initPostRenderOperations();
        return html `
       <div class="root" dir=${this.direction}>
         ${this.renderSubSections()}
       </div>
     `;
    }
    /**
     * Renders all subSections of the profile
     * Defines order of how they render
     *
     * @protected
     * @return {*}
     * @memberof MgtProfile
     */
    renderSubSections() {
        const subSections = [
            this.renderSkills(),
            this.renderBirthday(),
            this.renderLanguages(),
            this.renderWorkExperience(),
            this.renderEducation(),
            this.renderProfessionalInterests(),
            this.renderPersonalInterests()
        ];
        return subSections.filter(s => !!s);
    }
    /**
     * Render the user's known languages
     *
     * @protected
     * @returns
     * @memberof MgtProfile
     */
    renderLanguages() {
        var _a;
        const { languages } = this._profile;
        if (!(languages === null || languages === void 0 ? void 0 : languages.length)) {
            return null;
        }
        const languageItems = [];
        for (const language of languages) {
            let proficiency = null;
            if ((_a = language.proficiency) === null || _a === void 0 ? void 0 : _a.length) {
                proficiency = html `
           <span class="language__proficiency" tabindex="0">
             &nbsp;(${language.proficiency})
           </span>
         `;
            }
            languageItems.push(html `
         <div class="token-list__item language">
           <span class="language__title" tabindex="0">${language.displayName}</span>
           ${proficiency}
         </div>
       `);
        }
        const languageTitle = languageItems.length ? this.strings.LanguagesSubSectionTitle : '';
        return html `
       <section>
         <div class="section__title" tabindex="0">${languageTitle}</div>
         <div class="section__content">
           <div class="token-list">
             ${languageItems}
           </div>
         </div>
       </section>
     `;
    }
    /**
     * Render the user's skills
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtProfile
     */
    renderSkills() {
        const { skills } = this._profile;
        if (!(skills === null || skills === void 0 ? void 0 : skills.length)) {
            return null;
        }
        const skillItems = [];
        for (const skill of skills) {
            skillItems.push(html `
         <div class="token-list__item skill" tabindex="0">
           ${skill.displayName}
         </div>
       `);
        }
        const skillsTitle = skillItems.length ? this.strings.SkillsSubSectionTitle : '';
        return html `
       <section>
         <div class="section__title" tabindex="0">${skillsTitle}</div>
         <div class="section__content">
           <div class="token-list">
             ${skillItems}
           </div>
         </div>
       </section>
     `;
    }
    /**
     * Render the user's work experience timeline
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtProfile
     */
    renderWorkExperience() {
        var _a, _b, _c, _d, _e;
        const { positions } = this._profile;
        if (!(positions === null || positions === void 0 ? void 0 : positions.length)) {
            return null;
        }
        const positionItems = [];
        for (const position of this._profile.positions) {
            if (position.detail.description || position.detail.jobTitle !== '') {
                positionItems.push(html `
           <div class="data-list__item work-position">
             <div class="data-list__item__header">
               <div class="data-list__item__title" tabindex="0">${(_a = position.detail) === null || _a === void 0 ? void 0 : _a.jobTitle}</div>
               <div class="data-list__item__date-range" tabindex="0">
                 ${this.getDisplayDateRange(position.detail)}
               </div>
             </div>
             <div class="data-list__item__content">
               <div class="work-position__company" tabindex="0">
                 ${(_c = (_b = position === null || position === void 0 ? void 0 : position.detail) === null || _b === void 0 ? void 0 : _b.company) === null || _c === void 0 ? void 0 : _c.displayName}
               </div>
               <div class="work-position__location" tabindex="0">
                 ${this.displayLocation((_e = (_d = position === null || position === void 0 ? void 0 : position.detail) === null || _d === void 0 ? void 0 : _d.company) === null || _e === void 0 ? void 0 : _e.address)}
               </div>
             </div>
           </div>
         `);
            }
        }
        const workExperienceTitle = positionItems.length ? this.strings.WorkExperienceSubSectionTitle : '';
        return html `
       <section>
         <div class="section__title" tabindex="0">${workExperienceTitle}</div>
         <div class="section__content">
           <div class="data-list">
             ${positionItems}
           </div>
         </div>
       </section>
     `;
    }
    /**
     * Render the user's education timeline
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtProfile
     */
    renderEducation() {
        const { educationalActivities } = this._profile;
        if (!(educationalActivities === null || educationalActivities === void 0 ? void 0 : educationalActivities.length)) {
            return null;
        }
        const positionItems = [];
        for (const educationalActivity of educationalActivities) {
            positionItems.push(html `
         <div class="data-list__item educational-activity">
           <div class="data-list__item__header">
             <div class="data-list__item__title" tabindex="0">${educationalActivity.institution.displayName}</div>
             <div class="data-list__item__date-range" tabindex="0">
               ${this.getDisplayDateRange(educationalActivity)}
             </div>
           </div>
           ${educationalActivity.program.displayName
                ? html `<div class="data-list__item__content">
                  <div class="educational-activity__degree" tabindex="0">
                  ${educationalActivity.program.displayName}
                </div>`
                : nothing}
         </div>
       `);
        }
        const educationTitle = positionItems.length ? this.strings.EducationSubSectionTitle : '';
        return html `
       <section>
         <div class="section__title" tabindex="0">${educationTitle}</div>
         <div class="section__content">
           <div class="data-list">
             ${positionItems}
           </div>
         </div>
       </section>
     `;
    }
    /**
     * Render the user's professional interests
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtProfile
     */
    renderProfessionalInterests() {
        var _a;
        if (!((_a = this._professionalInterests) === null || _a === void 0 ? void 0 : _a.length)) {
            return null;
        }
        const interestItems = [];
        for (const interest of this._professionalInterests) {
            interestItems.push(html `
         <div class="token-list__item interest interest--professional" tabindex="0">
           ${interest.displayName}
         </div>
       `);
        }
        const professionalInterests = interestItems.length ? this.strings.professionalInterestsSubSectionTitle : '';
        return html `
       <section>
         <div class="section__title" tabindex="0">${professionalInterests}</div>
         <div class="section__content">
           <div class="token-list">
             ${interestItems}
           </div>
         </div>
       </section>
     `;
    }
    /**
     * Render the user's personal interests
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtProfile
     */
    renderPersonalInterests() {
        var _a;
        if (!((_a = this._personalInterests) === null || _a === void 0 ? void 0 : _a.length)) {
            return null;
        }
        const interestItems = [];
        for (const interest of this._personalInterests) {
            interestItems.push(html `
         <div class="token-list__item interest interest--personal" tabindex="0">
           ${interest.displayName}
         </div>
       `);
        }
        const personalInterests = interestItems.length ? this.strings.personalInterestsSubSectionTitle : '';
        return html `
       <section>
         <div class="section__title" tabindex="0">${personalInterests}</div>
         <div class="section__content">
           <div class="token-list">
             ${interestItems}
           </div>
         </div>
       </section>
     `;
    }
    /**
     * Render the user's birthday
     *
     * @protected
     * @returns {TemplateResult}
     * @memberof MgtProfile
     */
    renderBirthday() {
        var _a;
        if (!((_a = this._birthdayAnniversary) === null || _a === void 0 ? void 0 : _a.date)) {
            return null;
        }
        return html `
       <section>
         <div class="section__title" tabindex="0">Birthday</div>
         <div class="section__content">
           <div class="birthday">
             <div class="birthday__icon">
               ${getSvg(SvgIcon.Birthday)}
             </div>
             <div class="birthday__date" tabindex="0">
               ${this.getDisplayDate(new Date(this._birthdayAnniversary.date))}
             </div>
           </div>
         </div>
       </section>
     `;
    }
    getDisplayDate(date) {
        return date.toLocaleString('default', {
            day: 'numeric',
            month: 'long'
        });
    }
    getDisplayDateRange(event) {
        // if startMonthYear is not defined, we do not show the date range (otherwise it will always start with 1970)
        if (!event.startMonthYear) {
            return nothing;
        }
        const start = new Date(event.startMonthYear).getFullYear();
        // if the start year is 0 or 1 - it's probably an error or a strange "undefined"-value
        if (start === 0 || start === 1) {
            return nothing;
        }
        const end = event.endMonthYear ? new Date(event.endMonthYear).getFullYear() : this.strings.currentYearSubtitle;
        return `${start} — ${end}`;
    }
    displayLocation(address) {
        if (address === null || address === void 0 ? void 0 : address.city) {
            if (address.state) {
                return `${address.city}, ${address.state}`;
            }
            return address.city;
        }
        return nothing;
    }
    initPostRenderOperations() {
        setTimeout(() => {
            try {
                const sections = this.shadowRoot.querySelectorAll('section');
                sections.forEach(section => {
                    // Perform post render operations per section
                    this.handleTokenOverflow(section);
                });
            }
            catch (_a) {
                // An exception may occur if the component is suddenly removed during post render operations.
            }
        }, 0);
    }
    handleTokenOverflow(section) {
        const tokenLists = section.querySelectorAll('.token-list');
        if (!(tokenLists === null || tokenLists === void 0 ? void 0 : tokenLists.length)) {
            return;
        }
        for (const tokenList of Array.from(tokenLists)) {
            const items = tokenList.querySelectorAll('.token-list__item');
            if (!(items === null || items === void 0 ? void 0 : items.length)) {
                continue;
            }
            let overflowItems = null;
            let itemRect = items[0].getBoundingClientRect();
            const tokenListRect = tokenList.getBoundingClientRect();
            const maxtop = itemRect.height * 2 + tokenListRect.top;
            // Use (items.length - 1) to prevent [+1 more] from appearing.
            for (let i = 0; i < items.length - 1; i++) {
                itemRect = items[i].getBoundingClientRect();
                if (itemRect.top > maxtop) {
                    overflowItems = Array.from(items).slice(i, items.length);
                    break;
                }
            }
            if (overflowItems) {
                overflowItems.forEach(i => i.classList.add('overflow'));
                const overflowToken = document.createElement('div');
                overflowToken.classList.add('token-list__item');
                overflowToken.classList.add('token-list__item--show-overflow');
                overflowToken.tabIndex = 0;
                overflowToken.innerText = `+ ${overflowItems.length} more`;
                // On click or enter(accessibility), remove [+n more] token and reveal the hidden overflow tokens.
                const revealOverflow = () => {
                    overflowToken.remove();
                    overflowItems.forEach(i => i.classList.remove('overflow'));
                };
                overflowToken.addEventListener('click', () => {
                    revealOverflow();
                });
                overflowToken.addEventListener('keydown', (e) => {
                    if (e.code === 'Enter') {
                        revealOverflow();
                    }
                });
                tokenList.appendChild(overflowToken);
            }
        }
    }
};
MgtProfile = __decorate([
    customElement('profile'),
    __metadata("design:paramtypes", [Object])
], MgtProfile);
export { MgtProfile };
//# sourceMappingURL=mgt-profile.js.map