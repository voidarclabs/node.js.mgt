{"version":3,"file":"CustomHeaderMiddleware.js","sourceRoot":"src/","sources":["CustomHeaderMiddleware.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAGH,OAAO,EAAE,gBAAgB,EAAE,MAAM,wEAAwE,CAAC;AAE1G;;;;;;GAMG;AACH,MAAM,OAAO,sBAAsB;IAIjC,YAAY,gBAAwC;QAClD,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC5C,CAAC;IAED;;;;;;OAMG;IACU,OAAO,CAAC,OAAgB;;YACnC,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC/C,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;oBACzB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;wBACtD,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAW,CAAC,CAAC;qBACjF;iBACF;aACF;YACD,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;KAAA;IAED;;;;;OAKG;IACI,OAAO,CAAC,IAAgB;QAC7B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { Context, Middleware } from '@microsoft/microsoft-graph-client';\nimport { setRequestHeader } from '@microsoft/microsoft-graph-client/lib/es/src/middleware/MiddlewareUtil';\n\n/**\n * Custom Middleware to add custom headers when making calls\n * through the proxy provider\n *\n * @class CustomHeaderMiddleware\n * @implements {Middleware}\n */\nexport class CustomHeaderMiddleware implements Middleware {\n  private _nextMiddleware: Middleware;\n  private readonly _getCustomHeaders?: () => Promise<object>;\n\n  constructor(getCustomHeaders?: () => Promise<object>) {\n    this._getCustomHeaders = getCustomHeaders;\n  }\n\n  /**\n   * Execute the current middleware\n   *\n   * @param {Context} context\n   * @returns {Promise<void>}\n   * @memberof CustomHeaderMiddleware\n   */\n  public async execute(context: Context): Promise<void> {\n    if (this._getCustomHeaders) {\n      const headers = await this._getCustomHeaders();\n      for (const key in headers) {\n        if (Object.prototype.hasOwnProperty.call(headers, key)) {\n          setRequestHeader(context.request, context.options, key, headers[key] as string);\n        }\n      }\n    }\n    return await this._nextMiddleware.execute(context);\n  }\n\n  /**\n   * Handles setting of next middleware\n   *\n   * @param {Middleware} next\n   * @memberof SdkVersionMiddleware\n   */\n  public setNext(next: Middleware): void {\n    this._nextMiddleware = next;\n  }\n}\n"]}