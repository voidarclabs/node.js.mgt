{"version":3,"file":"SharePointProvider.js","sourceRoot":"src/","sources":["SharePointProvider.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;AAEH,OAAO,EACL,SAAS,EACT,aAAa,EACb,kBAAkB,EAElB,gCAAgC,EACjC,MAAM,wBAAwB,CAAC;AA2BhC;;;;;;GAMG;AACH,MAAM,OAAO,kBAAmB,SAAQ,SAAS;IAC/C;;;;;OAKG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;;;;OAMG;IACH,IAAI,UAAU;QACZ,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACH,IAAW,IAAI;QACb,OAAO,uBAAuB,CAAC;IACjC,CAAC;IAqBD,YAAY,OAAuB,EAAE,UAAyB,gCAAgC;QAC5F,KAAK,EAAE,CAAC;QAER,KAAK,OAAO,CAAC,uBAAuB,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,CAAC,aAA+B,EAAQ,EAAE;YACrG,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC;YAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACtC,KAAK,IAAI,CAAC,aAAa,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACU,cAAc;;YACzB,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,gCAAgC,CAAC;YAC/E,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC;KAAA;IACD;;;;;OAKG;IACI,YAAY,CAAC,MAAgB;QAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEa,aAAa;;YACzB,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAClF,CAAC;KAAA;CACF","sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport {\n  IProvider,\n  ProviderState,\n  createFromProvider,\n  GraphEndpoint,\n  MICROSOFT_GRAPH_DEFAULT_ENDPOINT\n} from '@microsoft/mgt-element';\n\n/**\n * AadTokenProvider\n *\n * @interface AadTokenProvider\n */\ndeclare interface AadTokenProvider {\n  /**\n   * get token with x\n   *\n   * @param {string} x\n   * @memberof AadTokenProvider\n   */\n  getToken(x: string): Promise<string>;\n}\n\n/**\n * contains the contextual services available to a web part\n *\n * @export\n * @interface WebPartContext\n */\ndeclare interface WebPartContext {\n  aadTokenProviderFactory: { getTokenProvider(): Promise<AadTokenProvider> };\n}\n\n/**\n * SharePoint Provider handler\n *\n * @export\n * @class SharePointProvider\n * @extends {IProvider}\n */\nexport class SharePointProvider extends IProvider {\n  /**\n   * returns _provider\n   *\n   * @readonly\n   * @memberof SharePointProvider\n   */\n  get provider(): AadTokenProvider {\n    return this._provider;\n  }\n\n  /**\n   * returns _idToken\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof SharePointProvider\n   */\n  get isLoggedIn(): boolean {\n    return !!this._idToken;\n  }\n\n  /**\n   * Name used for analytics\n   *\n   * @readonly\n   * @memberof IProvider\n   */\n  public get name() {\n    return 'MgtSharePointProvider';\n  }\n\n  /**\n   * privilege level for authentication\n   *\n   * @type {string[]}\n   * @memberof SharePointProvider\n   */\n  public scopes: string[];\n\n  /**\n   * authority\n   *\n   * @type {string}\n   * @memberof SharePointProvider\n   */\n  public authority: string;\n  private _idToken: string;\n\n  private _provider: AadTokenProvider;\n\n  constructor(context: WebPartContext, baseUrl: GraphEndpoint = MICROSOFT_GRAPH_DEFAULT_ENDPOINT) {\n    super();\n\n    void context.aadTokenProviderFactory.getTokenProvider().then((tokenProvider: AadTokenProvider): void => {\n      this._provider = tokenProvider;\n      this.baseURL = baseUrl;\n      this.graph = createFromProvider(this);\n      void this.internalLogin();\n    });\n  }\n\n  /**\n   * uses provider to receive access token via SharePoint Provider\n   *\n   * @returns {Promise<string>}\n   * @memberof SharePointProvider\n   */\n  public async getAccessToken(): Promise<string> {\n    const baseUrl = this.baseURL ? this.baseURL : MICROSOFT_GRAPH_DEFAULT_ENDPOINT;\n    return await this.provider.getToken(baseUrl);\n  }\n  /**\n   * update scopes\n   *\n   * @param {string[]} scopes\n   * @memberof SharePointProvider\n   */\n  public updateScopes(scopes: string[]) {\n    this.scopes = scopes;\n  }\n\n  private async internalLogin(): Promise<void> {\n    this._idToken = await this.getAccessToken();\n    this.setState(this._idToken ? ProviderState.SignedIn : ProviderState.SignedOut);\n  }\n}\n"]}